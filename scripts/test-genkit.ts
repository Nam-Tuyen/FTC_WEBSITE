/**
 * Test script for Genkit AI flows
 * Run with: npx tsx scripts/test-genkit.ts
 */

import { config } from 'dotenv';
config();

import { ftcChatbot } from '../ai/flows/ftc-chatbot';
import { moderateBlogComments } from '../ai/flows/moderate-blog-comments';
import { analyzeApplication } from '../ai/flows/analyze-application';
import { personalAdvisorChat } from '../ai/flows/personal-advisor-chat';

async function testFtcChatbot() {
  console.log('\nü§ñ Testing FTC Chatbot...');
  try {
    const result = await ftcChatbot({
      message: "FTC l√† g√¨? C√¢u l·∫°c b·ªô n√†y c√≥ nh·ªØng ho·∫°t ƒë·ªông g√¨?",
      history: [],
      mode: 'club'
    });
    
    console.log('‚úÖ FTC Chatbot Response:');
    console.log('Response:', result.response.substring(0, 200) + '...');
    console.log('Source:', result.source);
    console.log('Suggestions:', result.suggestions?.slice(0, 3));
  } catch (error) {
    console.error('‚ùå FTC Chatbot Error:', error);
  }
}

async function testModerateComments() {
  console.log('\nüõ°Ô∏è Testing Comment Moderation...');
  try {
    const result = await moderateBlogComments({
      comment: "B√†i vi·∫øt hay qu√°! C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª."
    });
    
    console.log('‚úÖ Comment Moderation Result:');
    console.log('Is Safe:', result.isSafe);
    console.log('Reason:', result.reason || 'No reason provided');
  } catch (error) {
    console.error('‚ùå Comment Moderation Error:', error);
  }
}

async function testAnalyzeApplication() {
  console.log('\nüìù Testing Application Analysis...');
  try {
    const result = await analyzeApplication({
      reason: "T√¥i mu·ªën tham gia FTC ƒë·ªÉ h·ªçc h·ªèi th√™m v·ªÅ FinTech v√† ph√°t tri·ªÉn k·ªπ nƒÉng chuy√™n m√¥n.",
      expectation: "T√¥i hy v·ªçng s·∫Ω ƒë∆∞·ª£c tham gia c√°c d·ª± √°n th·ª±c t·∫ø v√† k·∫øt n·ªëi v·ªõi nh·ªØng ng∆∞·ªùi c√πng ch√≠ h∆∞·ªõng.",
      situation: "N·∫øu c√≥ xung ƒë·ªôt trong nh√≥m, t√¥i s·∫Ω l·∫Øng nghe √Ω ki·∫øn c·ªßa m·ªçi ng∆∞·ªùi v√† t√¨m c√°ch gi·∫£i quy·∫øt m·ªôt c√°ch h√≤a b√¨nh."
    });
    
    console.log('‚úÖ Application Analysis Result:');
    console.log('Analysis:', result.analysis);
  } catch (error) {
    console.error('‚ùå Application Analysis Error:', error);
  }
}

async function testPersonalAdvisor() {
  console.log('\nüí¨ Testing Personal Advisor...');
  try {
    const result = await personalAdvisorChat({
      message: "M√¨nh c√≥ th·ªÉ tham gia nh·ªØng ho·∫°t ƒë·ªông g√¨ trong ban n√†y?",
      context: {
        departmentInfo: {
          name: "Ban Truy·ªÅn th√¥ng & K·ªπ thu·∫≠t",
          description: "Qu·∫£n l√Ω h·∫° t·∫ßng c√¥ng ngh·ªá, thi·∫øt k·∫ø ƒë·ªì h·ªça, ph√°t tri·ªÉn website",
          strengths: ["S√°ng t·∫°o", "K·ªπ thu·∫≠t"],
          weaknesses: ["Giao ti·∫øp"]
        },
        quizScores: {
          A: 7,
          B: 3,
          C: 5,
          D: 4
        },
        department: "A",
        isReturningUser: false,
        chatCount: 1
      }
    });
    
    console.log('‚úÖ Personal Advisor Response:');
    console.log('Response:', result.response.substring(0, 200) + '...');
  } catch (error) {
    console.error('‚ùå Personal Advisor Error:', error);
  }
}

async function runAllTests() {
  console.log('üöÄ Starting Genkit Flow Tests...');
  
  // Check if API key is configured
  if (!process.env.GEMINI_API_KEY && !process.env.GOOGLE_API_KEY) {
    console.error('‚ùå No API key found. Please set GEMINI_API_KEY or GOOGLE_API_KEY in your .env file');
    process.exit(1);
  }
  
  await testFtcChatbot();
  await testModerateComments();
  await testAnalyzeApplication();
  await testPersonalAdvisor();
  
  console.log('\n‚ú® All tests completed!');
}

// Run tests
runAllTests().catch(console.error);