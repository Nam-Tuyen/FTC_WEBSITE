"use client"

import React, { useEffect, useMemo, useRef, useState } from "react"
import dynamic from "next/dynamic"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"

const animations = {
  fadeIn: "animate-in fade-in duration-500",
  slideUp: "animate-in slide-in-from-bottom-3",
  slideDown: "animate-in slide-in-from-top-3",
  scaleIn: "animate-in zoom-in-50 duration-300",
}
// import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar" // Commented out to avoid conflict
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip"
import { ChatMode, FAQ_MAP, SUGGESTED_QUESTIONS, FTC_CONTACTS, normalize, faqMatchOrNull, withCTA } from "../api/chat/gemini/route"
import { BRAND } from "./constants/brand"

// Navigation ƒë·ªông (gi·ªØ nh∆∞ project)
const Navigation = dynamic(() => import("@/components/navigation"), { ssr: false })

// --- Types ---
type ChatMessage = { 
  id: string; 
  role: "user" | "assistant"; 
  content: string; 
  mode?: ChatMode; 
  ts?: number;
  reactions?: {
    likes?: number;
    shares?: number;
  };
  isLiked?: boolean;
}

// --- ENV & constants ---
const NEXT_PUBLIC_FTC_WEBSITE = process.env.NEXT_PUBLIC_FTC_WEBSITE || ""
const NEXT_PUBLIC_BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || ""
// const FTC_FANPAGE = "https://www.facebook.com/clbfintechuel" // Moved to FTC_CONTACTS

// const SUGGESTED_QUESTIONS: string[] = [ // Moved to backend route
//   "C√¢u l·∫°c b·ªô c√≥ nh·ªØng ho·∫°t ƒë·ªông g√¨?",
//   "L√†m th·∫ø n√†o ƒë·ªÉ tham gia c√¢u l·∫°c b·ªô?",
//   "C√°c ban trong c√¢u l·∫°c b·ªô l√†m g√¨?",
//   "Th·ªùi gian sinh ho·∫°t di·ªÖn ra khi n√†o?",
//   "C·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ ·ª©ng tuy·ªÉn?",
//   "C√¢u l·∫°c b·ªô ƒë∆∞·ª£c th√†nh l·∫≠p khi n√†o?",
//   "C√¢u l·∫°c b·ªô c√≥ nh·ªØng th√†nh t√≠ch g√¨?",
// ]

const CHAT_MODES: Array<{ mode: ChatMode; label: string; description: string; gradient: string; lightGradient: string; icon: string }> = [
  {
    mode: "club",
    label: "H·ªèi v·ªÅ c√¢u l·∫°c b·ªô",
    description: "∆Øu ti√™n FAQ FTC; ngo√†i danh s√°ch d√πng Gemini (vai c·ªë v·∫•n t√¢n sinh vi√™n).",
    gradient: BRAND.gradients.primary,
    lightGradient: BRAND.gradients.soft,
    icon: "üë•",
  },
  {
    mode: "industry",
    label: "H·ªèi v·ªÅ ng√†nh",
    description: "T·ªïng h·ª£p t·ª´ Google (API th·∫≠t ho·∫∑c m√¥ ph·ªèng), c√≥ tr√≠ch ngu·ªìn ng·∫Øn g·ªçn.",
    gradient: BRAND.gradients.primaryReverse,
    lightGradient: BRAND.gradients.ambient,
    icon: "üìö",
  },
]

// --- FAQ c·ªë ƒë·ªãnh cho FTC (kh√≥a kh√¥ng d·∫•u) ---
// const FAQ_MAP: Record<string, string> = { // Moved to backend route
//   "cac ban trong cau lac bo lam gi":
//     "Ban H·ªçc thu·∫≠t: Thi·∫øt k·∫ø n·ªôi dung cho workshop v√† talkshow, chu·∫©n b·ªã c√¢u h·ªèi cho t·ªça ƒë√†m, x√¢y d·ª±ng ng√¢n h√†ng c√¢u h·ªèi, ra ƒë·ªÅ v√† ch·∫•m cu·ªôc thi ATTACKER.\nBan S·ª± ki·ªán: L·∫≠p k·∫ø ho·∫°ch v√† h·ªì s∆° t·ªï ch·ª©c, x√¢y d·ª±ng k·ªãch b·∫£n MC v√† timeline, ƒëi·ªÅu ph·ªëi h·∫≠u c·∫ßn v√† gi√°m s√°t th·ª±c thi t·∫°i hi·ªán tr∆∞·ªùng.\nBan Truy·ªÅn th√¥ng: Thi·∫øt k·∫ø ·∫•n ph·∫©m, qu·∫£n l√Ω c√°c k√™nh truy·ªÅn th√¥ng, l·∫≠p k·∫ø ho·∫°ch n·ªôi dung v√† ph√°t tri·ªÉn h√¨nh ·∫£nh th∆∞∆°ng hi·ªáu c·ªßa c√¢u l·∫°c b·ªô.\nBan T√†i ch√≠nh c√° nh√¢n: T·ªï ch·ª©c ƒë√†o t·∫°o v·ªÅ qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n cho sinh vi√™n, ph√°t tri·ªÉn v√† c·∫≠p nh·∫≠t b·ªô b√†i MoneyWe, h·ªó tr·ª£ gi·∫£ng vi√™n ·ªü c√°c h·ªçc ph·∫ßn li√™n quan.\nBan Nh√¢n s·ª±: Ph√¢n c√¥ng v√† theo d√µi ti·∫øn ƒë·ªô, b·∫£o ƒë·∫£m ngu·ªìn l·ª±c, tri·ªÉn khai ho·∫°t ƒë·ªông g·∫Øn k·∫øt v√† g√¨n gi·ªØ vƒÉn h√≥a t·ªï ch·ª©c.",
//   "cau lac bo co nhung hoat dong gi":
//     "FTC tri·ªÉn khai h·ªá sinh th√°i ho·∫°t ƒë·ªông h·ªçc thu·∫≠t v√† tr·∫£i nghi·ªám th·ª±c t·∫ø g·ªìm h·ªôi th·∫£o, t·ªça ƒë√†m v√† chuy√™n ƒë·ªÅ v·ªÅ FinTech, d·ªØ li·ªáu, tr√≠ tu·ªá nh√¢n t·∫°o, ng√¢n h√†ng s·ªë, th·ªã tr∆∞·ªùng v·ªën v√† qu·∫£n tr·ªã r·ªßi ro. B√™n c·∫°nh ƒë√≥ l√† cu·ªôc thi h·ªçc thu·∫≠t ATTACKER, chu·ªói talkshow v√† workshop, c√°c bu·ªïi training n·ªôi b·ªô, tham quan doanh nghi·ªáp nh∆∞ VNG, s·ª± ki·ªán h∆∞·ªõng nghi·ªáp Web3 Career Innovation v√† ho·∫°t ƒë·ªông g·∫Øn k·∫øt c·ªông ƒë·ªìng FTC Trip.",
//   "lam the nao de tham gia cau lac bo":
//     `B·∫°n theo d√µi Fanpage ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ª£t tuy·ªÉn th√†nh vi√™n v√† h∆∞·ªõng d·∫´n n·ªôp h·ªì s∆°. Link Fanpage: ${FTC_FANPAGE} . Th√¥ng b√°o s·∫Ω n√™u r√µ m·ªëc th·ªùi gian, ƒëi·ªÅu ki·ªán v√† quy tr√¨nh.`,
//   "thoi gian sinh hoat dien ra khi nao":
//     "L·ªãch sinh ho·∫°t ƒë∆∞·ª£c c√¥ng b·ªë tr∆∞·ªõc tr√™n c√°c k√™nh n·ªôi b·ªô v√† Fanpage ƒë·ªÉ m·ªçi th√†nh vi√™n n·∫Øm b·∫Øt k·ªãp th·ªùi. T√πy ch∆∞∆°ng tr√¨nh, c√¢u l·∫°c b·ªô s·∫Ω th√¥ng b√°o r√µ th·ªùi gian, h√¨nh th·ª©c tham gia v√† y√™u c·∫ßu chu·∫©n b·ªã cho t·ª´ng ho·∫°t ƒë·ªông nh∆∞ talkshow, workshop, training ho·∫∑c s·ª± ki·ªán theo m√πa.",
//   "can ky nang gi de ung tuyen":
//     "FTC ch√†o ƒë√≥n ƒëa d·∫°ng chuy√™n ng√†nh. Tinh th·∫ßn h·ªçc h·ªèi, k·ª∑ lu·∫≠t v√† ch·ªß ƒë·ªông l√† n·ªÅn t·∫£ng quan tr·ªçng. Ki·∫øn th·ª©c n·ªÅn v·ªÅ Excel, SQL ho·∫∑c Python l√† l·ª£i th·∫ø khi tham gia c√°c n·ªôi dung d·ªØ li·ªáu v√† c√¥ng ngh·ªá t√†i ch√≠nh. K·ªπ nƒÉng vi·∫øt v√† thuy·∫øt tr√¨nh gi√∫p b·∫°n ƒë√≥ng g√≥p hi·ªáu qu·∫£ cho h·ªçc thu·∫≠t v√† truy·ªÅn th√¥ng. K·ªπ nƒÉng l√†m vi·ªác nh√≥m v√† qu·∫£n l√Ω th·ªùi gian h·ªó tr·ª£ b·∫°n theo k·ªãp ti·∫øn ƒë·ªô d·ª± √°n v√† s·ª± ki·ªán. ·ª®ng vi√™n quan t√¢m m·∫£ng s·ª± ki·ªán n√™n c√≥ t∆∞ duy t·ªï ch·ª©c v√† kh·∫£ nƒÉng ph·ªëi h·ª£p nhi·ªÅu ƒë·∫ßu vi·ªác. ·ª®ng vi√™n thi√™n v·ªÅ truy·ªÅn th√¥ng c·∫ßn kh·∫£ nƒÉng x√¢y d·ª±ng n·ªôi dung v√† th·∫©m m·ªπ th·ªã gi√°c.",
//   "cau lac bo duoc thanh lap khi nao":
//     "FTC tr·ª±c thu·ªôc Khoa T√†i ch√≠nh v√† Ng√¢n h√†ng, Tr∆∞·ªùng ƒê·∫°i h·ªçc Kinh t·∫ø v√† Lu·∫≠t, ƒêHQG-HCM. C√¢u l·∫°c b·ªô ƒë∆∞·ª£c th√†nh l·∫≠p v√†o th√°ng m∆∞·ªùi m·ªôt nƒÉm 2020 d∆∞·ªõi s·ª± h∆∞·ªõng d·∫´n c·ªßa ThS. NCS Phan Huy T√¢m c√πng ƒë·ªôi ng≈© sinh vi√™n ng√†nh c√¥ng ngh·ªá t√†i ch√≠nh.",
//   "cau lac bo co nhung thanh tich gi":
//     "NƒÉm h·ªçc 2024‚Äì2025, FTC ƒë∆∞·ª£c Ban C√°n s·ª± ƒêo√†n ƒêHQG-HCM t·∫∑ng Gi·∫•y khen v√¨ ƒë√≥ng g√≥p t√≠ch c·ª±c cho c√¥ng t√°c ƒêo√†n v√† phong tr√†o thanh ni√™n. C√¢u l·∫°c b·ªô ƒë·ªìng th·ªùi v√†o Top 10 Nh√≥m 4 c·ªßa Gi·∫£i th∆∞·ªüng ƒê·ªïi m·ªõi s√°ng t·∫°o v√† Kh·ªüi nghi·ªáp TP.HCM I-STAR, ƒë∆∞·ª£c c·∫•p Gi·∫•y ch·ª©ng nh·∫≠n ghi nh·∫≠n n·ªó l·ª±c v√† ƒë√≥ng g√≥p trong ho·∫°t ƒë·ªông ƒë·ªïi m·ªõi s√°ng t·∫°o.",
// }

// --- Helpers ---
// function normalize(text: string) { // Moved to backend route
//   return (text || "")
//     .toLowerCase()
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "")
//     .replace(/[^a-z0-9\s]/g, " ")
//     .replace(/\s+/g, " ")
//     .trim()
// }

// function faqMatchOrNull(q: string): string | null { // Moved to backend route
//   const nx = normalize(q)
//   for (const [k, v] of Object.entries(FAQ_MAP)) {
//     if (nx.includes(k) || k.includes(nx)) return v
//   }
//   return null
// }

// function websiteAnchor(): string { // Moved to backend route
//   if (NEXT_PUBLIC_FTC_WEBSITE) {
//     return `B·∫°n c√≥ th·ªÉ xem th√™m t·∫°i website ch√≠nh th·ª©c: <a href="${NEXT_PUBLIC_FTC_WEBSITE}" target="_blank" rel="noopener noreferrer">${NEXT_PUBLIC_FTC_WEBSITE}</a>.`
//   }
//   return `Theo d√µi Fanpage: <a href="${FTC_FANPAGE}" target="_blank" rel="noopener noreferrer">${FTC_FANPAGE}</a>.`
// }

async function askServer({
  mode,
  question,
  history,
}: {
  mode: ChatMode
  question: string
  history?: Array<{ role: "user" | "assistant"; content: string }>
}) {
  const endpoints = [
    "/api/chat/gemini",
    NEXT_PUBLIC_BACKEND_URL ? `${NEXT_PUBLIC_BACKEND_URL}/chat` : null,
  ].filter(Boolean) as string[]

  let lastErr: any = null
  for (const url of endpoints) {
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          mode,
          message: question,
          messages: [...(history || []), { role: "user", content: question }],
        }),
      })
      if (!res.ok) {
        const txt = await res.text().catch(() => null)
        console.warn("Server returned non-ok", url, res.status, txt)
        throw new Error(`Server ${res.status}: ${txt ?? res.statusText}`)
      }
      const data = await res.json().catch(() => ({}))
      return data.reply || data.response || data.text || data.answer || ""
    } catch (err) {
      lastErr = err
    }
  }
  console.error("All chat endpoints failed:", lastErr)
  return "Xin l·ªói, c√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau."
}

// --- Small UI atoms ---
function UserAvatar({ who }: { who: "user" | "assistant" }) {
  // IG story-like ring + gradient avatar
  const isUser = who === "user"
  return (
    <div
      className={cn(
        "relative h-10 w-10 rounded-full p-[2px]",
        isUser ? "bg-gradient-to-tr from-fuchsia-500 to-amber-400" : "bg-gradient-to-tr from-indigo-500 to-emerald-400"
      )}
    >
      <div className="h-full w-full rounded-full bg-background flex items-center justify-center text-xs font-semibold">
        {isUser ? "B·∫°n" : "FTC"}
      </div>
    </div>
  )
}

function Handle({ who }: { who: "user" | "assistant" }) {
  const name = who === "user" ? "B·∫°n" : "FTC Bot"
  const handle = who === "user" ? "@student" : "@ftc_official"
  return (
    <div className="flex items-center gap-2 animate-in slide-in-from-bottom-2">
      <span className="text-sm font-semibold">{name}</span>
      <span className="text-xs text-muted-foreground">{handle}</span>
      <span className="text-primary/80">‚úì</span>
    </div>
  )
}

function PrettyTime({ ts }: { ts?: number }) {
  const [text, setText] = useState("‚Ä¢")
  useEffect(() => {
    if (!ts) return
    const d = new Date(ts)
    const pad = (n: number) => String(n).padStart(2, "0")
    setText(`${pad(d.getHours())}:${pad(d.getMinutes())}`)
  }, [ts])
  return <span className="text-xs text-muted-foreground">¬∑ {text}</span>
}

function MessageCard({ m }: { m: ChatMessage }) {
  const isUser = m.role === "user"
  const isTyping = (m.content === "ƒêang suy nghƒ©..." || m.content.includes("ƒëang suy nghƒ©"))
  
  const TypingIndicator = () => (
    <div className="flex items-center gap-1" aria-live="polite">
      <div className="flex gap-1">
        <span className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-bounce [animation-delay:-0.3s]`} />
        <span className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-bounce [animation-delay:-0.15s]`} />
        <span className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-bounce`} />
      </div>
      <span className={`text-sm ${BRAND.text.muted} ml-2`}>AI ƒëang suy nghƒ©</span>
    </div>
  )
  
  return (
    <div className={cn("flex gap-4 mb-6 animate-in slide-in-from-bottom-3", isUser ? "flex-row-reverse" : "flex-row")}>
      {/* Avatar */}
      <div className="flex-shrink-0">
        <div className={cn(
          "w-12 h-12 rounded-3xl flex items-center justify-center",
          BRAND.shadows.medium,
          isUser 
            ? `${BRAND.surfaces.glass} ${BRAND.borders.primary} border` 
            : BRAND.gradients.radial
        )}>
          {isUser ? (
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${BRAND.gradients.primary}`}>
              <span className="text-sm font-bold text-white">U</span>
            </div>
          ) : (
            <span className="text-white text-lg">ü§ñ</span>
          )}
        </div>
      </div>

      {/* Message Content */}
      <div className={cn("flex-1 max-w-[75%]", isUser ? "items-end" : "items-start")}>
        <div className={cn(
          "relative rounded-3xl px-6 py-4",
          BRAND.shadows.large,
          isUser
            ? `${BRAND.text.inverse} ${BRAND.surfaces.userBubble}`
            : `${BRAND.text.primary} ${BRAND.surfaces.chatBubble} ${BRAND.borders.light} border`
        )}>
          {/* Message content */}
          {isTyping ? (
            <TypingIndicator />
          ) : (
            <div 
              className="text-sm leading-relaxed break-words"
              dangerouslySetInnerHTML={{ __html: (m.content || "").replace(/\n/g, "<br/>") }}
            />
          )}
          
          {/* Timestamp */}
          <div className={cn(
            "text-xs mt-3",
            isUser ? "text-white/70" : BRAND.text.light
          )}>
            {m.ts ? new Date(m.ts).toLocaleTimeString('vi-VN', { 
              hour: '2-digit', 
              minute: '2-digit' 
            }) : ''}
          </div>
        </div>

      </div>
    </div>
  )
}

// --- Page component ---
export default function ChatbotPage() {
  const [selectedMode, setSelectedMode] = useState<ChatMode>("club")
  const [inputValue, setInputValue] = useState("")
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [isSending, setIsSending] = useState(false)
  const [showModeChangeNotification, setShowModeChangeNotification] = useState(false)

  // Auto-scroll to bottom when new messages arrive (smooth scroll)
  useEffect(() => {
    const chatArea = document.getElementById("chat-scroll-area")
    if (chatArea) {
      // Smooth scroll to bottom without jumping
      setTimeout(() => {
        chatArea.scrollTo({
          top: chatArea.scrollHeight,
          behavior: 'smooth'
        })
      }, 100)
    }
  }, [messages])
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const dynamicPlaceholder = useMemo(
    () => (selectedMode === "club" ? "H·ªèi v·ªÅ FTC, ho·∫°t ƒë·ªông, c√°ch tham gia‚Ä¶" : "H·ªèi v·ªÅ FinTech, blockchain, ng√¢n h√†ng s·ªë‚Ä¶"),
    [selectedMode]
  )

  const handleModeChange = (m: ChatMode) => {
    setSelectedMode(m)
    setShowModeChangeNotification(true)
    setTimeout(() => setShowModeChangeNotification(false), 2000)
  }

  async function handleSendMessage(messageOverride?: string) {
    const q = (messageOverride || inputValue).trim()
    if (!q || isSending) return

    const newUserMsg: ChatMessage = { id: crypto.randomUUID(), role: "user", content: q, mode: selectedMode, ts: Date.now() }
    setMessages((prev: ChatMessage[]) => [...prev, newUserMsg])
    if (!messageOverride) setInputValue("")
    setIsSending(true)

    try {
      let botText: string | null = null

      // Club-mode: n·∫øu tr√πng c√¢u g·ª£i √Ω ‚Üí tr·∫£ l·ªùi c·ªë ƒë·ªãnh FTC
      if (selectedMode === "club") {
        const quick = faqMatchOrNull(q)
        if (quick) botText = quick
      }

      // Kh√¥ng kh·ªõp th√¨ g·ªçi backend (Gemini / Google-mode)
      const history = messages.slice(-6).map((m: ChatMessage) => ({ role: m.role, content: m.content }))
      const out = await askServer({ mode: selectedMode, question: q, history })
      botText = out || "Xin l·ªói, hi·ªán ch∆∞a th·ªÉ tr·∫£ l·ªùi."

      const botMsg: ChatMessage = {
        id: crypto.randomUUID(),
        role: "assistant",
        content: withCTA(botText!, selectedMode),
        mode: selectedMode,
        ts: Date.now(),
      }
      setMessages((prev: ChatMessage[]) => [...prev, botMsg])
    } catch {
      setMessages((prev: ChatMessage[]) => [
        ...prev,
        { id: crypto.randomUUID(), role: "assistant", content: "Xin l·ªói, hi·ªán ch∆∞a th·ªÉ tr·∫£ l·ªùi.", mode: selectedMode, ts: Date.now() },
      ])
    } finally {
      setIsSending(false)
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <>
      <div className={`min-h-screen overflow-hidden ${BRAND.surfaces.primary}`} style={{ 
        background: `linear-gradient(140deg, ${BRAND.primary50} 0%, ${BRAND.primary100} 40%, ${BRAND.primary200} 100%)` 
      }}>
      <Navigation />

        {/* Hero Section v·ªõi hi·ªáu ·ª©ng nh·∫•p nh√°y hi·ªán ƒë·∫°i */}
        <section className="relative min-h-[50vh] flex items-center justify-center py-16 px-4 sm:px-6 lg:px-8 animate-in fade-in duration-1000">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-1/4 -right-1/4 w-2/3 h-2/3 bg-gradient-to-br from-primary/20 via-accent/20 to-transparent rounded-full blur-3xl animate-float" />
            <div className="absolute -bottom-1/4 -left-1/4 w-2/3 h-2/3 bg-gradient-to-tr from-accent/20 via-primary/20 to-transparent rounded-full blur-3xl animate-float-reverse" />
          </div>

          <div className="relative max-w-5xl mx-auto text-center space-y-8">
            {/* Title v·ªõi hi·ªáu ·ª©ng nh·∫•p nh√°y hi·ªán ƒë·∫°i */}
            <h1 className="relative text-4xl sm:text-5xl lg:text-6xl font-extrabold">
              <span className="absolute inset-0 bg-gradient-to-r from-[#003663] to-[#1a5490] opacity-50 blur-2xl animate-pulse"></span>
              <span className={`relative ${BRAND.text.gradient} animate-bounce`} style={{
                animation: 'blink 1.5s infinite, gradient-shift 2s ease-in-out infinite, bounce 2s infinite'
              }}>
                FTC CHATBOT
              </span>
            </h1>
            
            {/* Subtitle */}
            <p className={`text-xl sm:text-2xl ${BRAND.text.secondary} leading-relaxed max-w-3xl mx-auto italic`}>
              Tr·ª£ l√Ω AI th√¥ng minh, h·ªó tr·ª£ gi·∫£i ƒë√°p th√¥ng tin v·ªÅ c√¢u l·∫°c b·ªô v√† ng√†nh Fintech cho c√°c b·∫°n t√¢n sinh vi√™n
            </p>

            {/* Mode selector v·ªõi hi·ªáu ·ª©ng hi·ªán ƒë·∫°i */}
            <div className="mt-8 relative">
              <div className={`absolute inset-0 ${BRAND.gradients.ethereal} rounded-3xl transform transition-all`} />
              <div className={`relative ${BRAND.surfaces.glass} rounded-3xl ${BRAND.borders.primary} border p-6`}>
                <div className="flex flex-col sm:flex-row items-center gap-4">
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 relative">
                      <div className={`absolute inset-0 ${BRAND.gradients.glow} rounded-xl blur-lg animate-pulse`} />
                      <div className={`relative w-full h-full ${BRAND.surfaces.glass} rounded-xl flex items-center justify-center`}>
                        <span className={`text-[${BRAND.primary}] text-lg`}>ü§ñ</span>
                      </div>
                    </div>
                    <div>
                      <h2 className={`text-lg font-bold ${BRAND.text.primary}`}>Ch·ªçn ch·∫ø ƒë·ªô</h2>
                      <p className={`text-sm ${BRAND.text.muted}`}>T√πy ch·ªânh tr·∫£i nghi·ªám chat</p>
                    </div>
        </div>

                  <div className="flex gap-2">
                    {CHAT_MODES.map((mc) => {
                      const active = selectedMode === mc.mode
                      return (
                        <button
                          key={mc.mode}
                          onClick={() => handleModeChange(mc.mode)}
                          className={cn(
                            "px-4 py-2 rounded-2xl text-sm font-medium flex items-center gap-2 transition-all duration-300 transform",
                            BRAND.states.hover,
                            active 
                              ? `${mc.gradient} text-white ${BRAND.shadows.medium} scale-105` 
                              : `${BRAND.surfaces.interactive} ${BRAND.text.muted} hover:${BRAND.text.secondary}`
                          )}
                        >
                          <span>{mc.icon}</span>
                          {mc.label}
                        </button>
                      )
                    })}
                  </div>
                </div>

                {showModeChangeNotification && (
                  <div className={`mt-4 inline-flex items-center gap-2 text-sm ${BRAND.text.muted} animate-in slide-in-from-top-2 duration-300`}>
                    <div className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-pulse`} />
                    ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô: <span className={`font-semibold text-[${BRAND.primary}]`}>{CHAT_MODES.find((m) => m.mode === selectedMode)?.label}</span>
            </div>
                )}
              </div>
            </div>
          </div>
        </section>

        {/* Main Content v·ªõi glassmorphism design hi·ªán ƒë·∫°i */}
        <section className="py-8 px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 xl:grid-cols-12 gap-8">
              {/* Chat Area (8 columns - t·ªëi ∆∞u h∆°n) */}
              <div className="xl:col-span-8">
                {/* Messages Container - TƒÉng chi·ªÅu cao ƒë√°ng k·ªÉ */}
                <div className={`relative flex flex-col h-[800px] sm:h-[900px] lg:h-[1000px] xl:h-[1100px] rounded-3xl ${BRAND.borders.glow} border ${BRAND.surfaces.glass} overflow-hidden ${BRAND.shadows.glow} backdrop-blur-xl`}>
                  {/* Header hi·ªán ƒë·∫°i v·ªõi gradient */}
                  <div className={`shrink-0 px-6 py-4 ${BRAND.borders.glass} border-b ${BRAND.gradients.ambient} flex items-center justify-between backdrop-blur-xl`}>
                    <div className="flex items-center gap-4">
                      <div className={`w-12 h-12 rounded-3xl ${BRAND.gradients.radial} flex items-center justify-center ${BRAND.shadows.glow}`}>
                        <span className="text-white text-xl">ü§ñ</span>
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-white animate-bounce" style={{
                          animation: 'blink 1.5s infinite, gradient-shift 2s ease-in-out infinite, bounce 2s infinite'
                        }}>FTC CHATBOT</h3>
                        <p className="text-sm text-white/80">AI Assistant ‚Ä¢ {selectedMode === "club" ? "C√¢u l·∫°c b·ªô" : "FinTech"}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
                      <span className="text-sm text-white/80 font-medium">Online</span>
                    </div>
                  </div>

                  {/* V√πng messages cu·ªôn b√™n trong v·ªõi scroll behavior t·ªëi ∆∞u */}
                  <div className={`flex-1 overflow-y-auto px-6 py-4 ${BRAND.gradients.surface} scroll-smooth`} id="chat-scroll-area" style={{
                    scrollBehavior: 'smooth',
                    scrollbarWidth: 'thin',
                    scrollbarColor: `${BRAND.primary} transparent`
                  }}>
                    {/* Welcome Message */}
                    {messages.length === 0 && (
                      <div className="flex flex-col items-center justify-center h-full text-center py-12">
                        <div className={`w-24 h-24 rounded-3xl ${BRAND.gradients.radial} flex items-center justify-center mb-6 ${BRAND.shadows.glow}`}>
                          <span className="text-white text-4xl">‚ú®</span>
                        </div>
                        <h3 className={`text-2xl font-bold ${BRAND.text.primary} mb-2`}>Ch√†o m·ª´ng ƒë·∫øn v·ªõi FTC Assistant! üëã</h3>
                        <p className={`${BRAND.text.muted} mb-6 max-w-md leading-relaxed`}>
                          T√¥i l√† tr·ª£ l√Ω AI, s·∫µn s√†ng gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√¢u l·∫°c b·ªô FTC v√† ki·∫øn th·ª©c c√¥ng ngh·ªá t√†i ch√≠nh.
                        </p>
                        <div className="mt-8 grid grid-cols-1 sm:grid-cols-2 gap-3 w-full max-w-xl">
                          {SUGGESTED_QUESTIONS.slice(0, 4).map((q, i) => (
                            <button
                              key={i}
                              onClick={() => handleSendMessage(q)}
                              className={`p-3 text-left rounded-2xl ${BRAND.surfaces.card} ${BRAND.borders.medium} border hover:${BRAND.borders.primary} ${BRAND.states.hover} transition-all text-sm ${BRAND.text.primary} hover:text-[${BRAND.primary}]`}
                            >
                              {q}
                            </button>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Messages */}
                    <div className="space-y-2">
                      {messages.map((m: ChatMessage) => (
                        <MessageCard key={m.id} m={m} />
                      ))}
                      <div ref={messagesEndRef} />
                    </div>
                  </div>

                  {/* Input hi·ªán ƒë·∫°i v·ªõi glassmorphism */}
                  <div className={`shrink-0 ${BRAND.borders.light} border-t px-6 py-5 ${BRAND.surfaces.glass} backdrop-blur-xl sticky bottom-0`}>
                    <div className="flex items-end gap-4">
                      <div className="flex-1">
                        <div className={`flex items-center gap-3 mb-3 text-sm ${BRAND.text.light}`}>
                          {selectedMode === "club" ? (
                            <>
                              <div className={`w-6 h-6 rounded-full ${BRAND.gradients.soft} flex items-center justify-center`}>
                                <span className="text-xs">üë•</span>
                              </div>
                              <span className="font-medium">Ch·∫ø ƒë·ªô C√¢u l·∫°c b·ªô</span>
                              <span className="text-xs px-2 py-1 rounded-full bg-blue-500/20 text-blue-300">FTC</span>
                            </>
                          ) : (
                            <>
                              <div className={`w-6 h-6 rounded-full ${BRAND.gradients.ambient} flex items-center justify-center`}>
                                <span className="text-xs">üìö</span>
                              </div>
                              <span className="font-medium">Ch·∫ø ƒë·ªô Ng√†nh</span>
                              <span className="text-xs px-2 py-1 rounded-full bg-orange-500/20 text-orange-300">FinTech</span>
                            </>
                          )}
                        </div>
                        <div className="relative">
                          <Input
                            value={inputValue}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}
                            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => handleKeyDown(e)}
                            placeholder={selectedMode === "club" ? "H·ªèi v·ªÅ FTC, ho·∫°t ƒë·ªông, c√°ch tham gia..." : "H·ªèi v·ªÅ FinTech, blockchain, ng√¢n h√†ng s·ªë..."}
                            className={`w-full h-12 ${BRAND.surfaces.interactive} ${BRAND.borders.primary} border ${BRAND.text.primary} placeholder:${BRAND.text.placeholder} ${BRAND.states.focus} outline-none transition-all rounded-2xl pr-14 text-sm`}
                            disabled={isSending}
                          />
                          {isSending && (
                            <div className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 flex items-center">
                              <div className={`w-5 h-5 border-2 border-gray-400 border-t-blue-400 rounded-full animate-spin`}></div>
                            </div>
                          )}
                        </div>
                      </div>
                      <Button 
                        onClick={handleSendMessage} 
                        disabled={!inputValue.trim() || isSending}
                        className={cn(
                          "w-12 h-12 rounded-2xl flex items-center justify-center transition-all text-white",
                          BRAND.shadows.medium,
                          BRAND.states.hover,
                          inputValue.trim() && !isSending 
                            ? `${CHAT_MODES.find(m => m.mode === selectedMode)?.gradient} hover:scale-105` 
                            : `${BRAND.surfaces.interactive} ${BRAND.text.light} cursor-not-allowed`
                        )}
                      >
                        <span className="text-lg">‚û§</span>
                      </Button>
                    </div>
                    {isSending && (
                      <div className={`mt-3 flex items-center gap-2 text-sm ${BRAND.text.muted}`}>
                        <span className={`animate-pulse text-[${BRAND.primary}]`}>üß†</span>
                        <span>AI ƒëang ph√¢n t√≠ch c√¢u h·ªèi c·ªßa b·∫°n...</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Sidebar hi·ªán ƒë·∫°i (4 columns - c√¢n ƒë·ªëi h∆°n) */}
              <div className="xl:col-span-4 space-y-6">
                {/* C√¢u h·ªèi g·ª£i √Ω - Card hi·ªán ƒë·∫°i */}
                <div className={`rounded-3xl ${BRAND.shadows.xl} overflow-hidden ${BRAND.borders.glow} border ${BRAND.surfaces.card} backdrop-blur-xl`}>
                  <div className={`px-6 py-4 ${BRAND.borders.light} border-b ${BRAND.gradients.ambient}`}>
                    <div className="flex items-center gap-3">
                      <div className={`w-12 h-12 rounded-3xl flex items-center justify-center ${BRAND.gradients.radial}`}>
                        <span className="text-white text-2xl">‚ùî</span>
                      </div>
                      <div>
                        <h3 className={`font-semibold ${BRAND.text.primary}`}>C√¢u h·ªèi g·ª£i √Ω</h3>
                        <p className={`text-sm ${BRAND.text.muted}`}>B·∫•m ƒë·ªÉ h·ªèi ngay</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-4 flex-1 flex flex-col">
                    <div className="space-y-3 flex-1 overflow-auto">
                      {SUGGESTED_QUESTIONS.map((q, idx) => (
                        <button
                          key={idx}
                          onClick={() => {
                            setSelectedMode("club")
                            handleSendMessage(q)
                          }}
                          className={`w-full text-left p-4 rounded-2xl ${BRAND.surfaces.interactive} ${BRAND.states.hover} ${BRAND.borders.light} border transition-all group`}
                        >
                          <div className="flex items-center gap-3">
                            <div className={`w-8 h-8 rounded-full ${BRAND.gradients.soft} flex items-center justify-center flex-shrink-0`}>
                              <span className={`text-sm font-semibold text-[${BRAND.primary}]`}>{idx + 1}</span>
                            </div>
                            <div className="flex-1">
                              <p className={`text-sm font-medium ${BRAND.text.primary} group-hover:text-[${BRAND.primary}] leading-relaxed`}>{q}</p>
                            </div>
                            <span className={`${BRAND.text.light} group-hover:text-[${BRAND.primary}] opacity-0 group-hover:opacity-100 transition-all`}>‚û§</span>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                </div>

                {/* T√≠nh nƒÉng n·ªïi b·∫≠t - Card ri√™ng bi·ªát */}
                <div className={`rounded-3xl ${BRAND.shadows.xl} overflow-hidden ${BRAND.borders.glow} border ${BRAND.surfaces.card} backdrop-blur-xl`}>
                  <div className={`px-6 py-4 ${BRAND.borders.light} border-b ${BRAND.gradients.ambient}`}>
                    <div className="flex items-center gap-3">
                      <div className={`w-12 h-12 rounded-3xl flex items-center justify-center ${BRAND.gradients.radial}`}>
                        <span className="text-white text-2xl">‚ö°</span>
                      </div>
                      <div>
                        <h3 className={`font-semibold ${BRAND.text.primary}`}>T√≠nh nƒÉng n·ªïi b·∫≠t</h3>
                        <p className={`text-sm ${BRAND.text.muted}`}>Kh√°m ph√° kh·∫£ nƒÉng AI</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-6">
                    <div className="space-y-4">
                      <div className="flex items-start gap-3 p-3 rounded-2xl hover:bg-white/5 transition-all">
                        <div className={`w-10 h-10 rounded-xl ${BRAND.gradients.soft} flex items-center justify-center flex-shrink-0`}>
                          <span className={`text-[${BRAND.primary}] text-lg`}>üß†</span>
                        </div>
                        <div>
                          <p className={`font-medium ${BRAND.text.primary} text-sm`}>AI th√¥ng minh</p>
                          <p className={`text-xs ${BRAND.text.muted}`}>Hi·ªÉu ng·ªØ c·∫£nh v√† ph·∫£n h·ªìi m·∫°ch l·∫°c</p>
                        </div>
                      </div>
                      <div className="flex items-start gap-3 p-3 rounded-2xl hover:bg-white/5 transition-all">
                        <div className={`w-10 h-10 rounded-xl ${BRAND.gradients.ambient} flex items-center justify-center flex-shrink-0`}>
                          <span className={`text-[${BRAND.secondary}] text-lg`}>üåç</span>
                        </div>
                        <div>
                          <p className={`font-medium ${BRAND.text.primary} text-sm`}>C·∫≠p nh·∫≠t k·ªãp th·ªùi</p>
                          <p className={`text-xs ${BRAND.text.muted}`}>Ki·∫øn th·ª©c FinTech t·ªïng quan</p>
                        </div>
                      </div>
                      <div className="flex items-start gap-3 p-3 rounded-2xl hover:bg-white/5 transition-all">
                        <div className={`w-10 h-10 rounded-xl ${BRAND.gradients.soft} flex items-center justify-center flex-shrink-0`}>
                          <span className={`text-[${BRAND.primary}] text-lg`}>üí¨</span>
                        </div>
                        <div>
                          <p className={`font-medium ${BRAND.text.primary} text-sm`}>ƒêa ch·∫ø ƒë·ªô chat</p>
                          <p className={`text-xs ${BRAND.text.muted}`}>C√¢u l·∫°c b·ªô & FinTech</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        {/* Footer */}
        {/* Footer */}
        <footer className={`mt-16 py-8 ${BRAND.borders.light} border-t ${BRAND.surfaces.glass}`}>
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <p className={`text-sm ${BRAND.text.muted}`}>
              Powered by ‚ö° <span className={`font-semibold ${BRAND.text.gradient}`}>FTC AI</span>
              {selectedMode === "industry" && <span className="ml-2">‚Ä¢ Demo FinTech Q&A</span>}
            </p>
          </div>
        </footer>
      </div>
    </>
  )
}
