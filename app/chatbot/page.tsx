"use client"

import React, { useEffect, useMemo, useRef, useState } from "react"
import dynamic from "next/dynamic"
import {
  Bot,
  BookOpen,
  HelpCircle,
  MessageSquare,
  Send,
  Users,
  Heart,
  Repeat2,
  Share2,
  MoreHorizontal,
  CheckCheck,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"

// Navigation ƒë·ªông (gi·ªØ nh∆∞ project)
const Navigation = dynamic(() => import("@/components/navigation"), { ssr: false })

// --- Types ---
type ChatMode = "club" | "industry"
type ChatMessage = { id: string; role: "user" | "assistant"; content: string; mode?: ChatMode; ts?: number }

// --- ENV & constants ---
const NEXT_PUBLIC_FTC_WEBSITE = process.env.NEXT_PUBLIC_FTC_WEBSITE || ""
const NEXT_PUBLIC_BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || ""
const FTC_FANPAGE = "https://www.facebook.com/clbfintechuel"

const SUGGESTED_QUESTIONS: string[] = [
  "C√¢u l·∫°c b·ªô c√≥ nh·ªØng ho·∫°t ƒë·ªông g√¨?",
  "L√†m th·∫ø n√†o ƒë·ªÉ tham gia c√¢u l·∫°c b·ªô?",
  "C√°c ban trong c√¢u l·∫°c b·ªô l√†m g√¨?",
  "Th·ªùi gian sinh ho·∫°t di·ªÖn ra khi n√†o?",
  "C·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ ·ª©ng tuy·ªÉn?",
  "C√¢u l·∫°c b·ªô ƒë∆∞·ª£c th√†nh l·∫≠p khi n√†o?",
  "C√¢u l·∫°c b·ªô c√≥ nh·ªØng th√†nh t√≠ch g√¨?",
]

const CHAT_MODES: Array<{ mode: ChatMode; label: string; description: string; color: string; icon: React.ComponentType<any> }> = [
  {
    mode: "club",
    label: "H·ªèi v·ªÅ c√¢u l·∫°c b·ªô",
    description: "∆Øu ti√™n FAQ FTC; ngo√†i danh s√°ch d√πng Gemini (vai c·ªë v·∫•n t√¢n sinh vi√™n).",
    color: "bg-blue-600",
    icon: Users,
  },
  {
    mode: "industry",
    label: "H·ªèi v·ªÅ ng√†nh",
    description: "T·ªïng h·ª£p t·ª´ Google (API th·∫≠t ho·∫∑c m√¥ ph·ªèng), c√≥ tr√≠ch ngu·ªìn ng·∫Øn g·ªçn.",
    color: "bg-green-600",
    icon: BookOpen,
  },
]

// --- FAQ c·ªë ƒë·ªãnh cho FTC (kh√≥a kh√¥ng d·∫•u) ---
const FAQ_MAP: Record<string, string> = {
  "cac ban trong cau lac bo lam gi":
    "Ban H·ªçc thu·∫≠t: Thi·∫øt k·∫ø n·ªôi dung cho workshop v√† talkshow, chu·∫©n b·ªã c√¢u h·ªèi cho t·ªça ƒë√†m, x√¢y d·ª±ng ng√¢n h√†ng c√¢u h·ªèi, ra ƒë·ªÅ v√† ch·∫•m cu·ªôc thi ATTACKER.\nBan S·ª± ki·ªán: L·∫≠p k·∫ø ho·∫°ch v√† h·ªì s∆° t·ªï ch·ª©c, x√¢y d·ª±ng k·ªãch b·∫£n MC v√† timeline, ƒëi·ªÅu ph·ªëi h·∫≠u c·∫ßn v√† gi√°m s√°t th·ª±c thi t·∫°i hi·ªán tr∆∞·ªùng.\nBan Truy·ªÅn th√¥ng: Thi·∫øt k·∫ø ·∫•n ph·∫©m, qu·∫£n l√Ω c√°c k√™nh truy·ªÅn th√¥ng, l·∫≠p k·∫ø ho·∫°ch n·ªôi dung v√† ph√°t tri·ªÉn h√¨nh ·∫£nh th∆∞∆°ng hi·ªáu c·ªßa c√¢u l·∫°c b·ªô.\nBan T√†i ch√≠nh c√° nh√¢n: T·ªï ch·ª©c ƒë√†o t·∫°o v·ªÅ qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n cho sinh vi√™n, ph√°t tri·ªÉn v√† c·∫≠p nh·∫≠t b·ªô b√†i MoneyWe, h·ªó tr·ª£ gi·∫£ng vi√™n ·ªü c√°c h·ªçc ph·∫ßn li√™n quan.\nBan Nh√¢n s·ª±: Ph√¢n c√¥ng v√† theo d√µi ti·∫øn ƒë·ªô, b·∫£o ƒë·∫£m ngu·ªìn l·ª±c, tri·ªÉn khai ho·∫°t ƒë·ªông g·∫Øn k·∫øt v√† g√¨n gi·ªØ vƒÉn h√≥a t·ªï ch·ª©c.",
  "cau lac bo co nhung hoat dong gi":
    "FTC tri·ªÉn khai h·ªá sinh th√°i ho·∫°t ƒë·ªông h·ªçc thu·∫≠t v√† tr·∫£i nghi·ªám th·ª±c t·∫ø g·ªìm h·ªôi th·∫£o, t·ªça ƒë√†m v√† chuy√™n ƒë·ªÅ v·ªÅ FinTech, d·ªØ li·ªáu, tr√≠ tu·ªá nh√¢n t·∫°o, ng√¢n h√†ng s·ªë, th·ªã tr∆∞·ªùng v·ªën v√† qu·∫£n tr·ªã r·ªßi ro. B√™n c·∫°nh ƒë√≥ l√† cu·ªôc thi h·ªçc thu·∫≠t ATTACKER, chu·ªói talkshow v√† workshop, c√°c bu·ªïi training n·ªôi b·ªô, tham quan doanh nghi·ªáp nh∆∞ VNG, s·ª± ki·ªán h∆∞·ªõng nghi·ªáp Web3 Career Innovation v√† ho·∫°t ƒë·ªông g·∫Øn k·∫øt c·ªông ƒë·ªìng FTC Trip.",
  "lam the nao de tham gia cau lac bo":
    `B·∫°n theo d√µi Fanpage ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ª£t tuy·ªÉn th√†nh vi√™n v√† h∆∞·ªõng d·∫´n n·ªôp h·ªì s∆°. Link Fanpage: ${FTC_FANPAGE} . Th√¥ng b√°o s·∫Ω n√™u r√µ m·ªëc th·ªùi gian, ƒëi·ªÅu ki·ªán v√† quy tr√¨nh.`,
  "thoi gian sinh hoat dien ra khi nao":
    "L·ªãch sinh ho·∫°t ƒë∆∞·ª£c c√¥ng b·ªë tr∆∞·ªõc tr√™n c√°c k√™nh n·ªôi b·ªô v√† Fanpage ƒë·ªÉ m·ªçi th√†nh vi√™n n·∫Øm b·∫Øt k·ªãp th·ªùi. T√πy ch∆∞∆°ng tr√¨nh, c√¢u l·∫°c b·ªô s·∫Ω th√¥ng b√°o r√µ th·ªùi gian, h√¨nh th·ª©c tham gia v√† y√™u c·∫ßu chu·∫©n b·ªã cho t·ª´ng ho·∫°t ƒë·ªông nh∆∞ talkshow, workshop, training ho·∫∑c s·ª± ki·ªán theo m√πa.",
  "can ky nang gi de ung tuyen":
    "FTC ch√†o ƒë√≥n ƒëa d·∫°ng chuy√™n ng√†nh. Tinh th·∫ßn h·ªçc h·ªèi, k·ª∑ lu·∫≠t v√† ch·ªß ƒë·ªông l√† n·ªÅn t·∫£ng quan tr·ªçng. Ki·∫øn th·ª©c n·ªÅn v·ªÅ Excel, SQL ho·∫∑c Python l√† l·ª£i th·∫ø khi tham gia c√°c n·ªôi dung d·ªØ li·ªáu v√† c√¥ng ngh·ªá t√†i ch√≠nh. K·ªπ nƒÉng vi·∫øt v√† thuy·∫øt tr√¨nh gi√∫p b·∫°n ƒë√≥ng g√≥p hi·ªáu qu·∫£ cho h·ªçc thu·∫≠t v√† truy·ªÅn th√¥ng. K·ªπ nƒÉng l√†m vi·ªác nh√≥m v√† qu·∫£n l√Ω th·ªùi gian h·ªó tr·ª£ b·∫°n theo k·ªãp ti·∫øn ƒë·ªô d·ª± √°n v√† s·ª± ki·ªán. ·ª®ng vi√™n quan t√¢m m·∫£ng s·ª± ki·ªán n√™n c√≥ t∆∞ duy t·ªï ch·ª©c v√† kh·∫£ nƒÉng ph·ªëi h·ª£p nhi·ªÅu ƒë·∫ßu vi·ªác. ·ª®ng vi√™n thi√™n v·ªÅ truy·ªÅn th√¥ng c·∫ßn kh·∫£ nƒÉng x√¢y d·ª±ng n·ªôi dung v√† th·∫©m m·ªπ th·ªã gi√°c.",
  "cau lac bo duoc thanh lap khi nao":
    "FTC tr·ª±c thu·ªôc Khoa T√†i ch√≠nh v√† Ng√¢n h√†ng, Tr∆∞·ªùng ƒê·∫°i h·ªçc Kinh t·∫ø v√† Lu·∫≠t, ƒêHQG-HCM. C√¢u l·∫°c b·ªô ƒë∆∞·ª£c th√†nh l·∫≠p v√†o th√°ng m∆∞·ªùi m·ªôt nƒÉm 2020 d∆∞·ªõi s·ª± h∆∞·ªõng d·∫´n c·ªßa ThS. NCS Phan Huy T√¢m c√πng ƒë·ªôi ng≈© sinh vi√™n ng√†nh c√¥ng ngh·ªá t√†i ch√≠nh.",
  "cau lac bo co nhung thanh tich gi":
    "NƒÉm h·ªçc 2024‚Äì2025, FTC ƒë∆∞·ª£c Ban C√°n s·ª± ƒêo√†n ƒêHQG-HCM t·∫∑ng Gi·∫•y khen v√¨ ƒë√≥ng g√≥p t√≠ch c·ª±c cho c√¥ng t√°c ƒêo√†n v√† phong tr√†o thanh ni√™n. C√¢u l·∫°c b·ªô ƒë·ªìng th·ªùi v√†o Top 10 Nh√≥m 4 c·ªßa Gi·∫£i th∆∞·ªüng ƒê·ªïi m·ªõi s√°ng t·∫°o v√† Kh·ªüi nghi·ªáp TP.HCM I-STAR, ƒë∆∞·ª£c c·∫•p Gi·∫•y ch·ª©ng nh·∫≠n ghi nh·∫≠n n·ªó l·ª±c v√† ƒë√≥ng g√≥p trong ho·∫°t ƒë·ªông ƒë·ªïi m·ªõi s√°ng t·∫°o.",
}

// --- Helpers ---
function normalize(text: string) {
  return (text || "")
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^a-z0-9\s]/g, " ")
    .replace(/\s+/g, " ")
    .trim()
}

function faqMatchOrNull(q: string): string | null {
  const nx = normalize(q)
  for (const [k, v] of Object.entries(FAQ_MAP)) {
    if (nx.includes(k) || k.includes(nx)) return v
  }
  return null
}

function websiteAnchor(): string {
  if (NEXT_PUBLIC_FTC_WEBSITE) {
    return `B·∫°n c√≥ th·ªÉ xem th√™m t·∫°i website ch√≠nh th·ª©c: <a href="${NEXT_PUBLIC_FTC_WEBSITE}" target="_blank" rel="noopener noreferrer">${NEXT_PUBLIC_FTC_WEBSITE}</a>.`
  }
  return `Theo d√µi Fanpage: <a href="${FTC_FANPAGE}" target="_blank" rel="noopener noreferrer">${FTC_FANPAGE}</a>.`
}

async function askServer({
  mode,
  question,
  history,
}: {
  mode: ChatMode
  question: string
  history?: Array<{ role: "user" | "assistant"; content: string }>
}) {
  const endpoints = [
    "/api/chat/gemini",
    NEXT_PUBLIC_BACKEND_URL ? `${NEXT_PUBLIC_BACKEND_URL}/chat` : null,
  ].filter(Boolean) as string[]

  let lastErr: any = null
  for (const url of endpoints) {
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          mode,
          message: question,
          messages: [...(history || []), { role: "user", content: question }],
        }),
      })
      if (!res.ok) {
        const txt = await res.text().catch(() => null)
        console.warn("Server returned non-ok", url, res.status, txt)
        throw new Error(`Server ${res.status}: ${txt ?? res.statusText}`)
      }
      const data = await res.json().catch(() => ({}))
      return data.reply || data.response || data.text || data.answer || ""
    } catch (err) {
      lastErr = err
    }
  }
  console.error("All chat endpoints failed:", lastErr)
  return "Xin l·ªói, c√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau."
}

// --- Small UI atoms ---
function Avatar({ who }: { who: "user" | "assistant" }) {
  // IG story-like ring + gradient avatar
  const isUser = who === "user"
  return (
    <div
      className={cn(
        "relative h-10 w-10 rounded-full p-[2px]",
        isUser ? "bg-gradient-to-tr from-fuchsia-500 to-amber-400" : "bg-gradient-to-tr from-indigo-500 to-emerald-400"
      )}
    >
      <div className="h-full w-full rounded-full bg-background flex items-center justify-center text-xs font-semibold">
        {isUser ? "B·∫°n" : "FTC"}
      </div>
    </div>
  )
}

function Handle({ who }: { who: "user" | "assistant" }) {
  const name = who === "user" ? "B·∫°n" : "FTC Bot"
  const handle = who === "user" ? "@student" : "@ftc_official"
  return (
    <div className="flex items-center gap-2">
      <span className="text-sm font-semibold">{name}</span>
      <span className="text-xs text-muted-foreground">{handle}</span>
      <CheckCheck className="h-3.5 w-3.5 text-primary/80" />
    </div>
  )
}

function PrettyTime({ ts }: { ts?: number }) {
  const [text, setText] = useState("‚Ä¢")
  useEffect(() => {
    if (!ts) return
    const d = new Date(ts)
    const pad = (n: number) => String(n).padStart(2, "0")
    setText(`${pad(d.getHours())}:${pad(d.getMinutes())}`)
  }, [ts])
  return <span className="text-xs text-muted-foreground">¬∑ {text}</span>
}

function MessageCard({ m }: { m: ChatMessage }) {
  const isUser = m.role === "user"
  
  return (
    <div className={cn("flex gap-4 mb-6", isUser ? "flex-row-reverse" : "flex-row")}>
      {/* Avatar */}
      <div className="flex-shrink-0">
        <div className={cn(
          "w-10 h-10 rounded-full flex items-center justify-center text-sm font-semibold shadow-lg",
          isUser 
            ? "bg-gradient-to-br from-blue-500 to-purple-600 text-white" 
            : "bg-gradient-to-br from-green-500 to-teal-600 text-white"
        )}>
          {isUser ? "üë§" : "ü§ñ"}
        </div>
      </div>

      {/* Message Content */}
      <div className={cn("flex-1 max-w-[80%]", isUser ? "items-end" : "items-start")}>
        <div className={cn(
          "relative rounded-2xl px-4 py-3 shadow-lg transition-all duration-300 hover:shadow-xl",
          isUser 
            ? "bg-gradient-to-br from-blue-500 to-purple-600 text-white ml-auto" 
            : "bg-white/10 backdrop-blur-lg border border-white/20 text-white"
        )}>
          {/* Message bubble arrow */}
          <div className={cn(
            "absolute top-3 w-0 h-0",
            isUser 
              ? "right-[-8px] border-l-[8px] border-l-blue-500 border-t-[8px] border-t-transparent border-b-[8px] border-b-transparent"
              : "left-[-8px] border-r-[8px] border-r-white/20 border-t-[8px] border-t-transparent border-b-[8px] border-b-transparent"
          )} />
          
          {/* Message text */}
          <div 
            className="prose prose-sm max-w-none"
            dangerouslySetInnerHTML={{ __html: (m.content || "").replace(/\n/g, "<br/>") }}
          />
          
          {/* Timestamp */}
          <div className={cn(
            "text-xs mt-2 opacity-70",
            isUser ? "text-blue-100" : "text-white/70"
          )}>
            {m.ts ? new Date(m.ts).toLocaleTimeString('vi-VN', { 
              hour: '2-digit', 
              minute: '2-digit' 
            }) : 'V·ª´a xong'}
          </div>
        </div>

        {/* Action buttons for bot messages */}
        {!isUser && (
          <div className="flex items-center gap-2 mt-2 ml-2">
            <button className="p-1.5 rounded-full hover:bg-white/10 transition-colors group">
              <Heart className="h-4 w-4 text-white/60 group-hover:text-red-400" />
            </button>
            <button className="p-1.5 rounded-full hover:bg-white/10 transition-colors group">
              <Repeat2 className="h-4 w-4 text-white/60 group-hover:text-blue-400" />
            </button>
            <button 
              className="p-1.5 rounded-full hover:bg-white/10 transition-colors group"
              onClick={() => navigator.clipboard?.writeText(m.content)}
            >
              <Share2 className="h-4 w-4 text-white/60 group-hover:text-green-400" />
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

// --- Page component ---
export default function ChatbotPage() {
  const [selectedMode, setSelectedMode] = useState<ChatMode>("club")
  const [inputValue, setInputValue] = useState("")
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [isSending, setIsSending] = useState(false)
  const [showModeChangeNotification, setShowModeChangeNotification] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  const dynamicPlaceholder = useMemo(
    () => (selectedMode === "club" ? "H·ªèi v·ªÅ FTC, ho·∫°t ƒë·ªông, c√°ch tham gia‚Ä¶" : "H·ªèi v·ªÅ FinTech, blockchain, ng√¢n h√†ng s·ªë‚Ä¶"),
    [selectedMode]
  )

  const handleModeChange = (m: ChatMode) => {
    setSelectedMode(m)
    setShowModeChangeNotification(true)
    setTimeout(() => setShowModeChangeNotification(false), 2000)
  }

  async function handleSendMessage(messageOverride?: string) {
    const q = (messageOverride || inputValue).trim()
    if (!q || isSending) return

    const newUserMsg: ChatMessage = { id: crypto.randomUUID(), role: "user", content: q, mode: selectedMode, ts: Date.now() }
    setMessages((prev) => [...prev, newUserMsg])
    if (!messageOverride) setInputValue("")
    setIsSending(true)

    try {
      let botText: string | null = null

      // Club-mode: n·∫øu tr√πng c√¢u g·ª£i √Ω ‚Üí tr·∫£ l·ªùi c·ªë ƒë·ªãnh FTC
      if (selectedMode === "club") {
        const quick = faqMatchOrNull(q)
        if (quick) botText = quick
      }

      // Kh√¥ng kh·ªõp th√¨ g·ªçi backend (Gemini / Google-mode)
      if (!botText) {
        const history = messages.slice(-6).map((m) => ({ role: m.role, content: m.content }))
        const out = await askServer({ mode: selectedMode, question: q, history })
        botText = out || "Xin l·ªói, hi·ªán ch∆∞a th·ªÉ tr·∫£ l·ªùi."
      }

      // N·∫øu h·ªèi link/website trong club-mode ‚Üí g·ª£i √Ω website/Fanpage
      if (selectedMode === "club") {
        const keys = ["link", "website", "trang web", "web", "th√¥ng tin", "thong tin", "tuy·ªÉn", "tuyen"]
        if (keys.some((k) => normalize(q).includes(normalize(k)))) {
          botText = `${botText}\n\n${websiteAnchor()}`
        }
      }

      const botMsg: ChatMessage = {
        id: crypto.randomUUID(),
        role: "assistant",
        content: botText!,
        mode: selectedMode,
        ts: Date.now(),
      }
      setMessages((prev) => [...prev, botMsg])
    } catch {
      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), role: "assistant", content: "Xin l·ªói, hi·ªán ch∆∞a th·ªÉ tr·∫£ l·ªùi.", mode: selectedMode, ts: Date.now() },
      ])
    } finally {
      setIsSending(false)
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-background/80 overflow-hidden">
      <Navigation />

      {/* Hero Section v·ªõi hi·ªáu ·ª©ng nh·∫•p nh√°y hi·ªán ƒë·∫°i */}
      <section className="relative min-h-[50vh] flex items-center justify-center py-16 px-4 sm:px-6 lg:px-8">
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-1/4 -right-1/4 w-2/3 h-2/3 bg-gradient-to-br from-primary/20 via-accent/20 to-transparent rounded-full blur-3xl animate-float" />
          <div className="absolute -bottom-1/4 -left-1/4 w-2/3 h-2/3 bg-gradient-to-tr from-accent/20 via-primary/20 to-transparent rounded-full blur-3xl animate-float-reverse" />
        </div>

        <div className="relative max-w-5xl mx-auto text-center space-y-8">
          {/* Title v·ªõi hi·ªáu ·ª©ng shimmer */}
          <h1 className="relative text-4xl sm:text-5xl lg:text-6xl font-extrabold">
            <span className="absolute inset-0 bg-gradient-to-r from-primary to-accent opacity-50 blur-2xl animate-pulse"></span>
            <span className="relative bg-gradient-to-r from-primary to-accent text-transparent bg-clip-text animate-text-shine">
              FTC CHATBOT
            </span>
          </h1>
          
          {/* Subtitle */}
          <p className="text-xl sm:text-2xl text-muted-foreground leading-relaxed max-w-3xl mx-auto italic">
            Tr·ª£ l√Ω AI th√¥ng minh cho t√¢n sinh vi√™n ¬∑ H·ªó tr·ª£ th√¥ng tin c√¢u l·∫°c b·ªô v√† ki·∫øn th·ª©c ng√†nh
          </p>

          {/* Mode selector v·ªõi hi·ªáu ·ª©ng hi·ªán ƒë·∫°i */}
          <div className="mt-8 relative">
            <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 rounded-3xl transform transition-all" />
            <div className="relative bg-background/40 backdrop-blur-lg rounded-3xl border border-primary/10 p-6">
              <div className="flex flex-col sm:flex-row items-center gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 relative">
                    <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20 rounded-xl blur-lg animate-pulse" />
                    <div className="relative w-full h-full bg-background/50 rounded-xl flex items-center justify-center">
                      <Bot className="h-6 w-6 text-primary" />
                    </div>
                  </div>
                  <div>
                    <h2 className="text-lg font-bold text-foreground">Ch·ªçn ch·∫ø ƒë·ªô</h2>
                    <p className="text-sm text-muted-foreground">T√πy ch·ªânh tr·∫£i nghi·ªám chat</p>
                  </div>
                </div>
                
                <div className="flex gap-2">
                  {CHAT_MODES.map((mc) => {
                    const Icon = mc.icon
                    const active = selectedMode === mc.mode
                    return (
                      <button
                        key={mc.mode}
                        onClick={() => handleModeChange(mc.mode)}
                        className={cn(
                          "px-4 py-2 rounded-xl text-sm font-medium flex items-center gap-2 transition-all duration-300 transform hover:scale-105",
                          active 
                            ? `${mc.color} text-white shadow-lg scale-105` 
                            : "bg-muted/50 hover:bg-accent/30 text-muted-foreground hover:text-foreground"
                        )}
                      >
                        <Icon className="h-4 w-4" />
                        {mc.label}
                      </button>
                    )
                  })}
                </div>
              </div>

              {showModeChangeNotification && (
                <div className="mt-4 inline-flex items-center gap-2 text-sm text-muted-foreground animate-in slide-in-from-top-2 duration-300">
                  <div className="w-2 h-2 rounded-full bg-primary animate-pulse" />
                  ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô: <span className="font-semibold text-primary">{CHAT_MODES.find((m) => m.mode === selectedMode)?.label}</span>
          </div>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* Main Content v·ªõi glassmorphism design */}
      <section className="py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto space-y-8">
          <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
            {/* Chat Area (8 columns) */}
            <div className="lg:col-span-8">
              {/* Messages Container */}
              <div className="relative bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 p-6 mb-6 min-h-[500px] max-h-[600px] overflow-y-auto">
                {/* Welcome Message */}
                {messages.length === 0 && (
                  <div className="flex flex-col items-center justify-center h-full text-center py-12">
                    <div className="w-20 h-20 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center mb-6 shadow-2xl">
                      <Bot className="h-10 w-10 text-white" />
                    </div>
                    <h3 className="text-2xl font-bold text-white mb-2">Ch√†o m·ª´ng ƒë·∫øn v·ªõi FTC Chatbot!</h3>
                    <p className="text-white/70 mb-6 max-w-md">
                      T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√¢u l·∫°c b·ªô FTC v√† ki·∫øn th·ª©c v·ªÅ ng√†nh c√¥ng ngh·ªá t√†i ch√≠nh
                    </p>
                    <div className="flex items-center gap-2 text-sm text-white/60">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span>ƒêang ho·∫°t ƒë·ªông</span>
                    </div>
                  </div>
                )}

                {/* Messages */}
                <div className="space-y-2">
                  {messages.map((m) => (
                    <MessageCard key={m.id} m={m} />
                  ))}
                  <div ref={messagesEndRef} />
                </div>
              </div>

              {/* Input Composer hi·ªán ƒë·∫°i */}
              <div className="relative bg-white/10 backdrop-blur-xl rounded-2xl border border-white/20 p-4">
                <div className="flex items-end gap-3">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2 text-sm text-white/70">
                      {selectedMode === "club" ? (
                        <>
                          <Users className="h-4 w-4 text-blue-400" />
                          <span>Ch·∫ø ƒë·ªô CLB - Th√¥ng tin FTC</span>
                        </>
                      ) : (
                        <>
                          <BookOpen className="h-4 w-4 text-green-400" />
                          <span>Ch·∫ø ƒë·ªô Ng√†nh - Ki·∫øn th·ª©c FinTech</span>
                        </>
                      )}
                    </div>
                    <div className="relative">
                      <Input
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        onKeyDown={handleKeyDown}
                        placeholder={selectedMode === "club" ? "H·ªèi v·ªÅ FTC, ho·∫°t ƒë·ªông, c√°ch tham gia..." : "H·ªèi v·ªÅ FinTech, blockchain, ng√¢n h√†ng s·ªë..."}
                        className="w-full bg-white/20 border-white/30 text-white placeholder:text-white/50 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 rounded-xl pr-12"
                        disabled={isSending}
                      />
                      {isSending && (
                        <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                          <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        </div>
                      )}
                    </div>
                  </div>
                  <Button 
                    onClick={handleSendMessage} 
                    disabled={!inputValue.trim() || isSending}
                    className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl shadow-lg transform hover:scale-105 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Send className="h-5 w-5" />
                  </Button>
                </div>
                {isSending && selectedMode === "industry" && (
                  <div className="flex items-center gap-2 mt-3 text-xs text-white/70">
                    <div className="w-4 h-4 border-2 border-white/30 border-t-blue-300 rounded-full animate-spin"></div>
                    <span>üîç ƒêang t√¨m ki·∫øm th√¥ng tin t·ª´ Google...</span>
                  </div>
                )}
              </div>
            </div>
          </div>

            {/* Sidebar v·ªõi hi·ªáu ·ª©ng hi·ªán ƒë·∫°i */}
            <div className="lg:col-span-4">
              <div className="relative bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 p-6">
                <div className="flex items-center gap-3 mb-6">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-br from-yellow-500 to-orange-600 flex items-center justify-center shadow-lg">
                    <HelpCircle className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white">
                      C√¢u h·ªèi g·ª£i √Ω
                    </h3>
                    <p className="text-sm text-white/70">Nh·∫•p ƒë·ªÉ h·ªèi ngay</p>
                  </div>
                </div>
                
                <div className="space-y-3">
                  {SUGGESTED_QUESTIONS.map((q, idx) => (
                    <button
                      key={idx}
                      onClick={() => {
                        setSelectedMode("club")
                        handleSendMessage(q)
                      }}
                      className="w-full text-left rounded-2xl bg-white/5 hover:bg-white/10 border border-white/20 hover:border-white/30 px-4 py-4 transition-all duration-300 transform hover:scale-[1.02] group"
                    >
                      <div className="flex items-start gap-3">
                        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0 mt-1">
                          <span className="text-white text-sm font-bold">{idx + 1}</span>
                        </div>
                        <div className="flex-1">
                          <div className="text-sm font-medium text-white group-hover:text-blue-300 transition-colors leading-relaxed">
                            {q}
                          </div>
                          <div className="mt-3 flex items-center gap-2">
                            <div className="flex items-center gap-1">
                              <Users className="h-3 w-3 text-blue-400" />
                              <span className="text-xs text-blue-300 font-medium">Ch·∫ø ƒë·ªô CLB</span>
                            </div>
                            <div className="flex items-center gap-1 ml-auto">
                              <Send className="h-3 w-3 text-white/50 group-hover:text-white/80" />
                              <span className="text-xs text-white/50 group-hover:text-white/80">G·ª≠i</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>

                {/* Quick Tips */}
                <div className="mt-8 p-4 rounded-2xl bg-gradient-to-r from-blue-500/20 to-purple-600/20 border border-blue-500/30">
                  <h4 className="text-sm font-semibold text-white mb-2 flex items-center gap-2">
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                    M·∫πo s·ª≠ d·ª•ng
                  </h4>
                  <ul className="text-xs text-white/70 space-y-1">
                    <li>‚Ä¢ Ch·∫ø ƒë·ªô CLB: Th√¥ng tin FTC ch√≠nh x√°c</li>
                    <li>‚Ä¢ Ch·∫ø ƒë·ªô Ng√†nh: Ki·∫øn th·ª©c FinTech t·ªïng h·ª£p</li>
                    <li>‚Ä¢ Nh·∫•p c√¢u h·ªèi g·ª£i √Ω ƒë·ªÉ h·ªèi ngay</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      {/* Footer */}
      <div className="pb-10">
        <div className="max-w-6xl mx-auto px-4">
          <div className="text-center text-xs text-muted-foreground bg-background/40 backdrop-blur border border-primary/10 rounded-xl py-3">
            Powered by ‚ö° <span className="font-semibold text-primary">FTC</span>
            {selectedMode === "industry" && <span className="ml-2">‚Ä¢ T√≠ch h·ª£p Google Search</span>}
          </div>
        </div>
      </div>
    </div>
  )
}
