"use client"

import React, { useEffect, useMemo, useRef, useState } from "react"
import dynamic from "next/dynamic"
import { Navigation } from "@/components/navigation"
import { Footer } from "@/components/footer"
import { Button } from "@/components/ui/Button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/Input"
import { Textarea } from "@/components/ui/Textarea"
import { cn } from "@/lib/utils"

const animations = {
  fadeIn: "animate-in fade-in duration-500",
  slideUp: "animate-in slide-in-from-bottom-3",
  slideDown: "animate-in slide-in-from-top-3",
  scaleIn: "animate-in zoom-in-50 duration-300",
}
// import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar" // Commented out to avoid conflict
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip"
import { ChatMode } from "@/chatbot/types"
import { SUGGESTED_QUESTIONS } from "./constants/suggested-questions"
import { SimpleChatbotSend } from "./components/simple-chatbot-send"
import "./components/chatbot-mobile-optimizations.css"
import { BRAND } from "./constants/brand"

// Navigation ƒë·ªông (gi·ªØ nh∆∞ project)
const Navigation = dynamic(() => import("@/components/navigation"), { ssr: false })

// --- Types ---
type ChatMessage = { 
  id: string; 
  role: "user" | "assistant"; 
  content: string; 
  mode?: ChatMode; 
  ts?: number;
  reactions?: {
    likes?: number;
    shares?: number;
  };
  isLiked?: boolean;
}

// --- ENV & constants ---
const NEXT_PUBLIC_FTC_WEBSITE = process.env.NEXT_PUBLIC_FTC_WEBSITE || ""
const NEXT_PUBLIC_BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || ""
// const FTC_FANPAGE = "https://www.facebook.com/clbfintechuel" // Moved to FTC_CONTACTS

// const SUGGESTED_QUESTIONS: string[] = [ // Moved to backend route
//   "C√¢u l·∫°c b·ªô c√≥ nh·ªØng ho·∫°t ƒë·ªông g√¨?",
//   "L√†m th·∫ø n√†o ƒë·ªÉ tham gia c√¢u l·∫°c b·ªô?",
//   "C√°c ban trong c√¢u l·∫°c b·ªô l√†m g√¨?",
//   "Th·ªùi gian sinh ho·∫°t di·ªÖn ra khi n√†o?",
//   "C·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ ·ª©ng tuy·ªÉn?",
//   "C√¢u l·∫°c b·ªô ƒë∆∞·ª£c th√†nh l·∫≠p khi n√†o?",
//   "C√¢u l·∫°c b·ªô c√≥ nh·ªØng th√†nh t√≠ch g√¨?",
// ]

const CHAT_MODES: Array<{ mode: ChatMode; label: string; description: string; gradient: string; lightGradient: string; icon: string }> = [
  {
    mode: "club",
    label: "H·ªèi v·ªÅ c√¢u l·∫°c b·ªô",
    description: "∆Øu ti√™n FAQ FTC; ngo√†i danh s√°ch d√πng Gemini (vai c·ªë v·∫•n t√¢n sinh vi√™n).",
    gradient: BRAND.gradients.primary,
    lightGradient: BRAND.gradients.soft,
    icon: "üë•",
  },
  {
    mode: "industry",
    label: "H·ªèi v·ªÅ ng√†nh",
    description: "T·ªïng h·ª£p t·ª´ Google (API th·∫≠t ho·∫∑c m√¥ ph·ªèng), c√≥ tr√≠ch ngu·ªìn ng·∫Øn g·ªçn.",
    gradient: BRAND.gradients.primaryReverse,
    lightGradient: BRAND.gradients.ambient,
    icon: "üìö",
  },
]

// --- FAQ c·ªë ƒë·ªãnh cho FTC (kh√≥a kh√¥ng d·∫•u) ---
// const FAQ_MAP: Record<string, string> = { // Moved to backend route
//   "cac ban trong cau lac bo lam gi":
//     "Ban H·ªçc thu·∫≠t: Thi·∫øt k·∫ø n·ªôi dung cho workshop v√† talkshow, chu·∫©n b·ªã c√¢u h·ªèi cho t·ªça ƒë√†m, x√¢y d·ª±ng ng√¢n h√†ng c√¢u h·ªèi, ra ƒë·ªÅ v√† ch·∫•m cu·ªôc thi ATTACKER.\nBan S·ª± ki·ªán: L·∫≠p k·∫ø ho·∫°ch v√† h·ªì s∆° t·ªï ch·ª©c, x√¢y d·ª±ng k·ªãch b·∫£n MC v√† timeline, ƒëi·ªÅu ph·ªëi h·∫≠u c·∫ßn v√† gi√°m s√°t th·ª±c thi t·∫°i hi·ªán tr∆∞·ªùng.\nBan Truy·ªÅn th√¥ng: Thi·∫øt k·∫ø ·∫•n ph·∫©m, qu·∫£n l√Ω c√°c k√™nh truy·ªÅn th√¥ng, l·∫≠p k·∫ø ho·∫°ch n·ªôi dung v√† ph√°t tri·ªÉn h√¨nh ·∫£nh th∆∞∆°ng hi·ªáu c·ªßa c√¢u l·∫°c b·ªô.\nBan T√†i ch√≠nh c√° nh√¢n: T·ªï ch·ª©c ƒë√†o t·∫°o v·ªÅ qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n cho sinh vi√™n, ph√°t tri·ªÉn v√† c·∫≠p nh·∫≠t b·ªô b√†i MoneyWe, h·ªó tr·ª£ gi·∫£ng vi√™n ·ªü c√°c h·ªçc ph·∫ßn li√™n quan.\nBan Nh√¢n s·ª±: Ph√¢n c√¥ng v√† theo d√µi ti·∫øn ƒë·ªô, b·∫£o ƒë·∫£m ngu·ªìn l·ª±c, tri·ªÉn khai ho·∫°t ƒë·ªông g·∫Øn k·∫øt v√† g√¨n gi·ªØ vƒÉn h√≥a t·ªï ch·ª©c.",
//   "cau lac bo co nhung hoat dong gi":
//     "FTC tri·ªÉn khai h·ªá sinh th√°i ho·∫°t ƒë·ªông h·ªçc thu·∫≠t v√† tr·∫£i nghi·ªám th·ª±c t·∫ø g·ªìm h·ªôi th·∫£o, t·ªça ƒë√†m v√† chuy√™n ƒë·ªÅ v·ªÅ FinTech, d·ªØ li·ªáu, tr√≠ tu·ªá nh√¢n t·∫°o, ng√¢n h√†ng s·ªë, th·ªã tr∆∞·ªùng v·ªën v√† qu·∫£n tr·ªã r·ªßi ro. B√™n c·∫°nh ƒë√≥ l√† cu·ªôc thi h·ªçc thu·∫≠t ATTACKER, chu·ªói talkshow v√† workshop, c√°c bu·ªïi training n·ªôi b·ªô, tham quan doanh nghi·ªáp nh∆∞ VNG, s·ª± ki·ªán h∆∞·ªõng nghi·ªáp Web3 Career Innovation v√† ho·∫°t ƒë·ªông g·∫Øn k·∫øt c·ªông ƒë·ªìng FTC Trip.",
//   "lam the nao de tham gia cau lac bo":
//     `B·∫°n theo d√µi Fanpage ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ª£t tuy·ªÉn th√†nh vi√™n v√† h∆∞·ªõng d·∫´n n·ªôp h·ªì s∆°. Link Fanpage: ${FTC_FANPAGE} . Th√¥ng b√°o s·∫Ω n√™u r√µ m·ªëc th·ªùi gian, ƒëi·ªÅu ki·ªán v√† quy tr√¨nh.`,
//   "thoi gian sinh hoat dien ra khi nao":
//     "L·ªãch sinh ho·∫°t ƒë∆∞·ª£c c√¥ng b·ªë tr∆∞·ªõc tr√™n c√°c k√™nh n·ªôi b·ªô v√† Fanpage ƒë·ªÉ m·ªçi th√†nh vi√™n n·∫Øm b·∫Øt k·ªãp th·ªùi. T√πy ch∆∞∆°ng tr√¨nh, c√¢u l·∫°c b·ªô s·∫Ω th√¥ng b√°o r√µ th·ªùi gian, h√¨nh th·ª©c tham gia v√† y√™u c·∫ßu chu·∫©n b·ªã cho t·ª´ng ho·∫°t ƒë·ªông nh∆∞ talkshow, workshop, training ho·∫∑c s·ª± ki·ªán theo m√πa.",
//   "can ky nang gi de ung tuyen":
//     "FTC ch√†o ƒë√≥n ƒëa d·∫°ng chuy√™n ng√†nh. Tinh th·∫ßn h·ªçc h·ªèi, k·ª∑ lu·∫≠t v√† ch·ªß ƒë·ªông l√† n·ªÅn t·∫£ng quan tr·ªçng. Ki·∫øn th·ª©c n·ªÅn v·ªÅ Excel, SQL ho·∫∑c Python l√† l·ª£i th·∫ø khi tham gia c√°c n·ªôi dung d·ªØ li·ªáu v√† c√¥ng ngh·ªá t√†i ch√≠nh. K·ªπ nƒÉng vi·∫øt v√† thuy·∫øt tr√¨nh gi√∫p b·∫°n ƒë√≥ng g√≥p hi·ªáu qu·∫£ cho h·ªçc thu·∫≠t v√† truy·ªÅn th√¥ng. K·ªπ nƒÉng l√†m vi·ªác nh√≥m v√† qu·∫£n l√Ω th·ªùi gian h·ªó tr·ª£ b·∫°n theo k·ªãp ti·∫øn ƒë·ªô d·ª± √°n v√† s·ª± ki·ªán. ·ª®ng vi√™n quan t√¢m m·∫£ng s·ª± ki·ªán n√™n c√≥ t∆∞ duy t·ªï ch·ª©c v√† kh·∫£ nƒÉng ph·ªëi h·ª£p nhi·ªÅu ƒë·∫ßu vi·ªác. ·ª®ng vi√™n thi√™n v·ªÅ truy·ªÅn th√¥ng c·∫ßn kh·∫£ nƒÉng x√¢y d·ª±ng n·ªôi dung v√† th·∫©m m·ªπ th·ªã gi√°c.",
//   "cau lac bo duoc thanh lap khi nao":
//     "FTC tr·ª±c thu·ªôc Khoa T√†i ch√≠nh v√† Ng√¢n h√†ng, Tr∆∞·ªùng ƒê·∫°i h·ªçc Kinh t·∫ø v√† Lu·∫≠t, ƒêHQG-HCM. C√¢u l·∫°c b·ªô ƒë∆∞·ª£c th√†nh l·∫≠p v√†o th√°ng m∆∞·ªùi m·ªôt nƒÉm 2020 d∆∞·ªõi s·ª± h∆∞·ªõng d·∫´n c·ªßa ThS. NCS Phan Huy T√¢m c√πng ƒë·ªôi ng≈© sinh vi√™n ng√†nh c√¥ng ngh·ªá t√†i ch√≠nh.",
//   "cau lac bo co nhung thanh tich gi":
//     "NƒÉm h·ªçc 2024‚Äì2025, FTC ƒë∆∞·ª£c Ban C√°n s·ª± ƒêo√†n ƒêHQG-HCM t·∫∑ng Gi·∫•y khen v√¨ ƒë√≥ng g√≥p t√≠ch c·ª±c cho c√¥ng t√°c ƒêo√†n v√† phong tr√†o thanh ni√™n. C√¢u l·∫°c b·ªô ƒë·ªìng th·ªùi v√†o Top 10 Nh√≥m 4 c·ªßa Gi·∫£i th∆∞·ªüng ƒê·ªïi m·ªõi s√°ng t·∫°o v√† Kh·ªüi nghi·ªáp TP.HCM I-STAR, ƒë∆∞·ª£c c·∫•p Gi·∫•y ch·ª©ng nh·∫≠n ghi nh·∫≠n n·ªó l·ª±c v√† ƒë√≥ng g√≥p trong ho·∫°t ƒë·ªông ƒë·ªïi m·ªõi s√°ng t·∫°o.",
// }

// --- Helpers ---
// function normalize(text: string) { // Moved to backend route
//   return (text || "")
//     .toLowerCase()
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "")
//     .replace(/[^a-z0-9\s]/g, " ")
//     .replace(/\s+/g, " ")
//     .trim()
// }

// function faqMatchOrNull(q: string): string | null { // Moved to backend route
//   const nx = normalize(q)
//   for (const [k, v] of Object.entries(FAQ_MAP)) {
//     if (nx.includes(k) || k.includes(nx)) return v
//   }
//   return null
// }

// function websiteAnchor(): string { // Moved to backend route
//   if (NEXT_PUBLIC_FTC_WEBSITE) {
//     return `B·∫°n c√≥ th·ªÉ xem th√™m t·∫°i website ch√≠nh th·ª©c: <a href="${NEXT_PUBLIC_FTC_WEBSITE}" target="_blank" rel="noopener noreferrer">${NEXT_PUBLIC_FTC_WEBSITE}</a>.`
//   }
//   return `Theo d√µi Fanpage: <a href="${FTC_FANPAGE}" target="_blank" rel="noopener noreferrer">${FTC_FANPAGE}</a>.`
// }

async function askServer({
  mode,
  question,
  history,
}: {
  mode: ChatMode
  question: string
  history?: Array<{ role: "user" | "assistant"; content: string }>
}) {
  const endpoints = [
    "/api/chat",
    "/api/chat/gemini",
    NEXT_PUBLIC_BACKEND_URL ? `${NEXT_PUBLIC_BACKEND_URL}/chat` : null,
  ].filter(Boolean) as string[]

  let lastErr: any = null
  for (const url of endpoints) {
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          mode,
          input: question,
          messages: [...(history || []), { role: "user", content: question }],
        }),
      })
      if (!res.ok) {
        const txt = await res.text().catch(() => null)
        console.warn("Server returned non-ok", url, res.status, txt)
        throw new Error(`Server ${res.status}: ${txt ?? res.statusText}`)
      }
      const data = await res.json().catch(() => ({}))
      return data.reply || data.response || data.text || data.answer || ""
    } catch (err) {
      lastErr = err
    }
  }
  console.error("All chat endpoints failed:", lastErr)
  return "Xin l·ªói, c√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau."
}

// --- Small UI atoms ---
function UserAvatar({ who }: { who: "user" | "assistant" }) {
  // IG story-like ring + gradient avatar
  const isUser = who === "user"
  return (
    <div
      className={cn(
        "relative h-10 w-10 rounded-full p-[2px]",
        isUser ? "bg-gradient-to-tr from-fuchsia-500 to-amber-400" : "bg-gradient-to-tr from-indigo-500 to-emerald-400"
      )}
    >
      <div className="h-full w-full rounded-full bg-background flex items-center justify-center text-xs font-semibold">
        {isUser ? "B·∫°n" : "FTC"}
      </div>
    </div>
  )
}

function Handle({ who }: { who: "user" | "assistant" }) {
  const name = who === "user" ? "B·∫°n" : "FTC Bot"
  const handle = who === "user" ? "@student" : "@ftc_official"
  return (
    <div className="flex items-center gap-2 animate-in slide-in-from-bottom-2">
      <span className="text-sm font-semibold">{name}</span>
      <span className="text-xs text-muted-foreground">{handle}</span>
      <span className="text-primary/80">‚úì</span>
    </div>
  )
}

function PrettyTime({ ts }: { ts?: number }) {
  const [text, setText] = useState("‚Ä¢")
  useEffect(() => {
    if (!ts) return
    const d = new Date(ts)
    const pad = (n: number) => String(n).padStart(2, "0")
    setText(`${pad(d.getHours())}:${pad(d.getMinutes())}`)
  }, [ts])
  return <span className="text-xs text-muted-foreground">¬∑ {text}</span>
}

function MessageCard({ m }: { m: ChatMessage }) {
  const isUser = m.role === "user"
  const isTyping = (m.content === "ƒêang suy nghƒ©..." || m.content.includes("ƒëang suy nghƒ©"))
  
  const TypingIndicator = () => (
    <div className="flex items-center gap-1" aria-live="polite">
      <div className="flex gap-1">
        <span className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-bounce [animation-delay:-0.3s]`} />
        <span className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-bounce [animation-delay:-0.15s]`} />
        <span className={`w-2 h-2 rounded-full bg-[${BRAND.primary}] animate-bounce`} />
      </div>
      <span className={`text-sm ${BRAND.text.muted} ml-2`}>AI ƒëang suy nghƒ©</span>
    </div>
  )
  
  return (
    <div className={cn("flex gap-4 mb-6 animate-in slide-in-from-bottom-3", isUser ? "flex-row-reverse" : "flex-row")}>
      {/* Avatar */}
      <div className="flex-shrink-0">
        <div className={cn(
          "w-12 h-12 rounded-3xl flex items-center justify-center",
          BRAND.shadows.medium,
          isUser 
            ? `${BRAND.surfaces.glass} ${BRAND.borders.primary} border` 
            : BRAND.gradients.radial
        )}>
          {isUser ? (
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${BRAND.gradients.primary}`}>
              <span className="text-sm font-bold text-white">U</span>
            </div>
          ) : (
            <span className="text-white text-lg">ü§ñ</span>
          )}
        </div>
      </div>

      {/* Message Content */}
      <div className={cn("flex-1 max-w-[75%]", isUser ? "items-end" : "items-start")}>
        <div className={cn(
          "relative rounded-3xl px-6 py-4",
          BRAND.shadows.large,
          isUser 
            ? `${BRAND.text.inverse} ${BRAND.surfaces.userBubble}`
            : `${BRAND.text.primary} ${BRAND.surfaces.chatBubble} ${BRAND.borders.light} border`
        )}>
          {/* Message content */}
          {isTyping ? (
            <TypingIndicator />
          ) : (
            <div 
              className="text-sm leading-relaxed break-words"
            dangerouslySetInnerHTML={{ __html: (m.content || "").replace(/\n/g, "<br/>") }}
          />
          )}
          
          {/* Timestamp */}
          <div className={cn(
            "text-xs mt-3",
            isUser ? "text-white/70" : BRAND.text.light
          )}>
            {m.ts ? new Date(m.ts).toLocaleTimeString('vi-VN', { 
              hour: '2-digit', 
              minute: '2-digit' 
            }) : ''}
          </div>
        </div>

      </div>
    </div>
  )
}

// --- Page component ---
export default function ChatbotPage() {
  const [selectedMode, setSelectedMode] = useState<ChatMode>("club")
  const [inputValue, setInputValue] = useState("")
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [isSending, setIsSending] = useState(false)
  const [showModeChangeNotification, setShowModeChangeNotification] = useState(false)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  // Auto-scroll to bottom when new messages arrive (smooth scroll)
  useEffect(() => {
    const chatArea = document.getElementById("chat-scroll-area")
    if (chatArea) {
      // Smooth scroll to bottom without jumping
      setTimeout(() => {
        chatArea.scrollTo({
          top: chatArea.scrollHeight,
          behavior: 'smooth'
        })
      }, 100)
    }
  }, [messages])
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const dynamicPlaceholder = useMemo(
    () => (selectedMode === "club" ? "H·ªèi v·ªÅ FTC, ho·∫°t ƒë·ªông, c√°ch tham gia‚Ä¶" : "H·ªèi v·ªÅ FinTech, blockchain, ng√¢n h√†ng s·ªë‚Ä¶"),
    [selectedMode]
  )

  const handleModeChange = (m: ChatMode) => {
    setSelectedMode(m)
    setShowModeChangeNotification(true)
    setTimeout(() => setShowModeChangeNotification(false), 2000)
  }

  async function handleSendMessage(messageOverride?: string) {
    const q = (messageOverride || inputValue).trim()
    if (!q || isSending) return

    const newUserMsg: ChatMessage = { id: crypto.randomUUID(), role: "user", content: q, mode: selectedMode, ts: Date.now() }
    setMessages((prev: ChatMessage[]) => [...prev, newUserMsg])
    if (!messageOverride) setInputValue("")
    setIsSending(true)

    try {
      // G·ªçi API m·ªõi v·ªõi mode trong payload
      const history = messages.slice(-6).map((m: ChatMessage) => ({ role: m.role, content: m.content }))
      console.log("Sending to API:", { mode: selectedMode, question: q, history })
      const out = await askServer({ mode: selectedMode, question: q, history })
      console.log("API Response:", out)
      const botText = out || "Xin l·ªói, hi·ªán ch∆∞a th·ªÉ tr·∫£ l·ªùi."

      const botMsg: ChatMessage = {
        id: crypto.randomUUID(),
        role: "assistant",
        content: botText,
        mode: selectedMode,
        ts: Date.now(),
      }
      setMessages((prev: ChatMessage[]) => [...prev, botMsg])
    } catch (error) {
      console.error("API Error:", error)
      setMessages((prev: ChatMessage[]) => [
        ...prev,
        { id: crypto.randomUUID(), role: "assistant", content: "Xin l·ªói, hi·ªán ch∆∞a th·ªÉ tr·∫£ l·ªùi.", mode: selectedMode, ts: Date.now() },
      ])
    } finally {
      setIsSending(false)
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    // Tr√™n mobile, Enter s·∫Ω xu·ªëng d√≤ng, kh√¥ng g·ª≠i tin nh·∫Øn
    // Ch·ªâ g·ª≠i tin nh·∫Øn khi b·∫•m n√∫t "‚û§" 
    if (e.key === "Enter" && !e.shiftKey) {
      // Kh√¥ng preventDefault ƒë·ªÉ cho ph√©p xu·ªëng d√≤ng tr√™n mobile
      return
    }
  }

  // Auto-resize textarea based on content
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 128)}px`
    }
  }, [inputValue])

  return (
    <>
      <div className="min-h-screen bg-[#003663] text-white overflow-hidden">
        <Navigation />

        {/* Mobile Responsive Hero Section */}
        <section className="relative min-h-[60vh] sm:min-h-[70vh] flex items-center justify-center py-12 sm:py-16 lg:py-24 px-4 sm:px-6 lg:px-8">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-1/4 -right-1/4 w-2/3 h-2/3 bg-gradient-to-br from-primary/20 via-accent/20 to-transparent rounded-full blur-3xl animate-float" />
            <div className="absolute -bottom-1/4 -left-1/4 w-2/3 h-2/3 bg-gradient-to-tr from-accent/20 via-primary/20 to-transparent rounded-full blur-3xl animate-float-reverse" />
          </div>

          <div className="relative max-w-6xl mx-auto text-center space-y-4 sm:space-y-6 lg:space-y-8">
            <h1 className="relative text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-extrabold">
              <span className="absolute inset-0 bg-gradient-to-r from-white to-white opacity-50 blur-2xl animate-pulse"></span>
              <span className="relative text-white animate-bounce" style={{
                animation: 'blink 1.5s infinite, gradient-shift 2s ease-in-out infinite, bounce 2s infinite'
              }}>
                FTC CHATBOT
              </span>
            </h1>
            <p className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl text-muted-foreground leading-relaxed max-w-4xl mx-auto italic px-4">
              Tr·ª£ l√Ω AI th√¥ng minh, h·ªó tr·ª£ gi·∫£i ƒë√°p th√¥ng tin v·ªÅ c√¢u l·∫°c b·ªô v√† ng√†nh Fintech cho c√°c b·∫°n t√¢n sinh vi√™n
            </p>

            {/* Mode selector v·ªõi hi·ªáu ·ª©ng hi·ªán ƒë·∫°i */}
            <div className="mt-8 relative">
              <div className={`absolute inset-0 ${BRAND.gradients.ethereal} rounded-3xl transform transition-all`} />
              {/* Modern Mode Selection Card */}
              <div className="relative group">
                {/* Animated Background */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/5 to-cyan-500/10 rounded-3xl transform transition-all duration-500 group-hover:scale-[1.02] group-hover:from-blue-500/15 group-hover:via-purple-500/10 group-hover:to-cyan-500/15" />
                
                {/* Glassmorphism Card */}
                <div className="relative bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-2xl rounded-3xl border border-white/20 p-6 sm:p-8 shadow-2xl shadow-black/20 transition-all duration-500 group-hover:shadow-3xl group-hover:shadow-blue-500/10">
                  
                  {/* Modern Header Section */}
                  <div className="text-center mb-8">
                    {/* Animated Icon */}
                    <div className="relative inline-block mb-6">
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-cyan-400 rounded-3xl blur-2xl animate-pulse opacity-60 scale-110" />
                      <div className="relative w-20 h-20 sm:w-24 sm:h-24 bg-gradient-to-br from-white/20 to-white/10 backdrop-blur-xl rounded-3xl flex items-center justify-center border border-white/30 shadow-2xl">
                        <span className="text-3xl sm:text-4xl animate-bounce">ü§ñ</span>
                      </div>
                      {/* Enhanced Floating particles */}
                      <div className="absolute -top-2 -right-2 w-4 h-4 bg-blue-400 rounded-full animate-float-particle opacity-80" />
                      <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-purple-400 rounded-full animate-float-particle opacity-80 animation-delay-300" />
                      <div className="absolute top-1/2 -left-3 w-2 h-2 bg-cyan-400 rounded-full animate-float-particle opacity-70 animation-delay-600" />
                      <div className="absolute top-1/2 -right-3 w-2 h-2 bg-green-400 rounded-full animate-float-particle opacity-70 animation-delay-900" />
                    </div>
                    
                    {/* Title Section */}
                    <div className="space-y-4">
                      <div className="inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-400/30 backdrop-blur-sm mb-4">
                        <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse mr-3" />
                        <span className="text-sm font-bold text-blue-300 uppercase tracking-wider">
                          AI CHATBOT
                        </span>
                      </div>
                      
                      <h2 className="text-3xl sm:text-4xl md:text-5xl font-black uppercase tracking-wider text-glow mb-4">
                        CH·ªåN CH·∫æ ƒê·ªò
                      </h2>
                      
                      <p className="text-lg sm:text-xl text-white/80 font-medium max-w-2xl mx-auto leading-relaxed">
                        T√πy ch·ªânh tr·∫£i nghi·ªám chat c·ªßa b·∫°n v·ªõi c√°c ch·∫ø ƒë·ªô chuy√™n bi·ªát
                      </p>
                      
                      {/* Status Indicator */}
                      <div className="flex items-center justify-center gap-3 mt-6">
                        <div className="flex items-center gap-2 px-4 py-2 bg-green-500/20 rounded-full border border-green-400/30">
                          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                          <span className="text-sm font-medium text-green-300">H·ªá th·ªëng s·∫µn s√†ng</span>
                        </div>
                        <div className="flex items-center gap-2 px-4 py-2 bg-blue-500/20 rounded-full border border-blue-400/30">
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
                          <span className="text-sm font-medium text-blue-300">AI Online</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Compact Mode Selection Cards */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                    {CHAT_MODES.map((mc, index) => {
                      const active = selectedMode === mc.mode
                      return (
                        <button
                          key={mc.mode}
                          onClick={() => handleModeChange(mc.mode)}
                          className={cn(
                            "group/btn relative overflow-hidden rounded-2xl p-4 sm:p-5 transition-all duration-500 transform",
                            "flex flex-col items-center text-center gap-3",
                            "border backdrop-blur-sm shadow-lg",
                            "hover:scale-[1.02] hover:shadow-xl active:scale-[0.98]",
                            "animate-slide-in-up",
                            active 
                              ? "bg-gradient-to-br from-blue-500/30 via-purple-500/20 to-cyan-500/30 border-blue-400/50 shadow-blue-500/20 scale-[1.01]"
                              : "bg-white/10 border-white/20 hover:bg-white/15 hover:border-white/30 hover:shadow-white/5"
                          )}
                          style={{
                            animationDelay: `${index * 150}ms`
                          }}
                        >
                          {/* Simplified Background */}
                          <div className={cn(
                            "absolute inset-0 transition-all duration-500 rounded-2xl",
                            active 
                              ? "bg-gradient-to-br from-blue-500/15 via-purple-500/10 to-cyan-500/15" 
                              : "group-hover/btn:bg-gradient-to-br group-hover/btn:from-white/5 group-hover/btn:to-white/10"
                          )} />
                          
                          {/* Icon Container - Smaller */}
                          <div className={cn(
                            "relative w-12 h-12 sm:w-14 sm:h-14 rounded-xl flex items-center justify-center transition-all duration-300",
                            "border backdrop-blur-sm shadow-md",
                            active
                              ? "bg-gradient-to-br from-blue-400/30 to-purple-400/30 border-blue-300/50 shadow-blue-500/20 scale-105"
                              : "bg-white/15 border-white/25 group-hover/btn:bg-white/20 group-hover/btn:border-white/35 group-hover/btn:scale-102"
                          )}>
                            <span className="relative text-lg sm:text-xl transition-all duration-300 group-hover/btn:scale-110">
                              {mc.icon}
                            </span>
                            
                            {/* Active Status Indicator - Smaller */}
                            {active && (
                              <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full flex items-center justify-center shadow-md">
                                <div className="w-1.5 h-1.5 bg-white rounded-full animate-pulse" />
                              </div>
                            )}
                          </div>
                          
                          {/* Content Section - Compact */}
                          <div className="relative space-y-1">
                            <h3 className={cn(
                              "font-bold text-sm sm:text-base transition-all duration-300",
                              active ? "text-white text-glow" : "text-white/90 group-hover/btn:text-white"
                            )}>
                              {mc.label}
                            </h3>
                            <p className={cn(
                              "text-xs sm:text-sm transition-all duration-300 leading-relaxed",
                              active ? "text-white/80" : "text-white/60 group-hover/btn:text-white/80"
                            )}>
                              {mc.mode === 'club' ? 'Th√¥ng tin c√¢u l·∫°c b·ªô FTC' : 'Ki·∫øn th·ª©c FinTech'}
                            </p>
                            
                            {/* Feature Tags - Smaller */}
                            <div className="flex flex-wrap gap-1 justify-center mt-2">
                              {mc.mode === 'club' ? (
                                <>
                                  <span className="px-2 py-0.5 bg-blue-500/20 text-blue-300 text-xs rounded-full border border-blue-400/30">
                                    CLB
                                  </span>
                                  <span className="px-2 py-0.5 bg-purple-500/20 text-purple-300 text-xs rounded-full border border-purple-400/30">
                                    Ho·∫°t ƒë·ªông
                                  </span>
                                </>
                              ) : (
                                <>
                                  <span className="px-2 py-0.5 bg-cyan-500/20 text-cyan-300 text-xs rounded-full border border-cyan-400/30">
                                    FinTech
                                  </span>
                                  <span className="px-2 py-0.5 bg-green-500/20 text-green-300 text-xs rounded-full border border-green-400/30">
                                    Ki·∫øn th·ª©c
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                          
                          {/* Selection Indicator - Smaller */}
                          <div className={cn(
                            "absolute bottom-2 left-1/2 transform -translate-x-1/2 transition-all duration-300",
                            active 
                              ? "w-6 h-0.5 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full shadow-md" 
                              : "w-0 h-0.5 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full group-hover/btn:w-4"
                          )} />
                        </button>
                      )
                    })}
                  </div>

                  {/* Enhanced Status Notification */}
                  {showModeChangeNotification && (
                    <div className="mt-8 relative">
                      <div className="absolute inset-0 bg-gradient-to-r from-green-500/20 via-blue-500/10 to-purple-500/20 rounded-3xl blur-sm" />
                      <div className="relative flex items-center gap-4 p-6 bg-gradient-to-r from-green-500/15 to-blue-500/15 rounded-3xl border border-green-400/40 backdrop-blur-xl shadow-2xl animate-in slide-in-from-top-2 duration-700">
                        <div className="relative">
                          <div className="w-4 h-4 bg-green-400 rounded-full animate-pulse shadow-lg" />
                          <div className="absolute inset-0 w-4 h-4 bg-green-400 rounded-full animate-ping" />
                        </div>
                        <div className="flex-1">
                          <p className="text-base font-bold text-white mb-1">
                            ‚úÖ ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô: 
                            <span className="ml-2 text-green-400 text-glow">
                              {CHAT_MODES.find((m) => m.mode === selectedMode)?.label}
                            </span>
                          </p>
                          <p className="text-sm text-white/80">
                            B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán ngay b√¢y gi·ªù
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
                          <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse animation-delay-300" />
                          <div className="w-2 h-2 bg-cyan-400 rounded-full animate-pulse animation-delay-600" />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Main Content v·ªõi glassmorphism design hi·ªán ƒë·∫°i */}
        <section className="py-8 px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 xl:grid-cols-12 gap-8">
              {/* Chat Area (8 columns - t·ªëi ∆∞u h∆°n) */}
              <div className="xl:col-span-8">
                {/* Messages Container - TƒÉng chi·ªÅu cao ƒë√°ng k·ªÉ */}
                <div className={`relative flex flex-col h-[800px] sm:h-[900px] lg:h-[1000px] xl:h-[1100px] rounded-3xl ${BRAND.borders.glow} border ${BRAND.surfaces.glass} overflow-hidden ${BRAND.shadows.glow} backdrop-blur-xl`}>
                  {/* Header hi·ªán ƒë·∫°i v·ªõi gradient */}
                  <div className={`shrink-0 px-6 py-4 ${BRAND.borders.glass} border-b ${BRAND.gradients.ambient} flex items-center justify-between backdrop-blur-xl`}>
                    <div className="flex items-center gap-4">
                      <div className={`w-12 h-12 rounded-3xl ${BRAND.gradients.radial} flex items-center justify-center ${BRAND.shadows.glow}`}>
                        <span className="text-white text-xl">ü§ñ</span>
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-white animate-bounce" style={{
                          animation: 'blink 1.5s infinite, gradient-shift 2s ease-in-out infinite, bounce 2s infinite'
                        }}>FTC CHATBOT</h3>
                        <p className="text-sm text-white/80">AI Assistant ‚Ä¢ {selectedMode === "club" ? "C√¢u l·∫°c b·ªô" : "FinTech"}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
                      <span className="text-sm text-white/80 font-medium">Online</span>
                    </div>
                  </div>

                  {/* V√πng messages cu·ªôn b√™n trong v·ªõi scroll behavior t·ªëi ∆∞u */}
                  <div className={`flex-1 overflow-y-auto px-6 py-4 ${BRAND.gradients.surface} scroll-smooth`} id="chat-scroll-area" style={{
                    scrollBehavior: 'smooth',
                    scrollbarWidth: 'thin',
                    scrollbarColor: `${BRAND.primary} transparent`
                  }}>
                    {/* Welcome Message */}
                    {messages.length === 0 && (
                      <div className="flex flex-col items-center justify-center h-full text-center py-12">
                        <div className={`w-24 h-24 rounded-3xl ${BRAND.gradients.radial} flex items-center justify-center mb-6 ${BRAND.shadows.glow}`}>
                          <span className="text-white text-4xl">‚ú®</span>
                        </div>
                        <h3 className={`text-2xl font-bold ${BRAND.text.primary} mb-2`}>Ch√†o m·ª´ng ƒë·∫øn v·ªõi FTC Assistant! üëã</h3>
                        <p className={`${BRAND.text.muted} mb-6 max-w-md leading-relaxed`}>
                          T√¥i l√† tr·ª£ l√Ω AI, s·∫µn s√†ng gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√¢u l·∫°c b·ªô FTC v√† ki·∫øn th·ª©c c√¥ng ngh·ªá t√†i ch√≠nh.
                        </p>
                        <div className="mt-8 grid grid-cols-1 sm:grid-cols-2 gap-3 w-full max-w-xl">
                          {(SUGGESTED_QUESTIONS || []).slice(0, 4).map((q, i) => (
                            <button
                              key={i}
                              onClick={() => handleSendMessage(q)}
                              className={`p-3 text-left rounded-2xl ${BRAND.surfaces.card} ${BRAND.borders.medium} border hover:${BRAND.borders.primary} ${BRAND.states.hover} transition-all text-sm ${BRAND.text.primary} hover:text-[${BRAND.primary}]`}
                            >
                              {q}
                            </button>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Messages */}
                    <div className="space-y-2">
                      {messages.map((m: ChatMessage) => (
                        <MessageCard key={m.id} m={m} />
                      ))}
                      <div ref={messagesEndRef} />
                    </div>
                  </div>

                  {/* Input hi·ªán ƒë·∫°i v·ªõi glassmorphism */}
                  <div className={`shrink-0 ${BRAND.borders.light} border-t px-6 py-5 ${BRAND.surfaces.glass} backdrop-blur-xl sticky bottom-0`}>
                    <div className="flex items-end gap-4">
                      <div className="flex-1">
                        <div className={`flex items-center gap-3 mb-3 text-sm ${BRAND.text.light}`}>
                          {selectedMode === "club" ? (
                            <>
                              <div className={`w-6 h-6 rounded-full ${BRAND.gradients.soft} flex items-center justify-center`}>
                                <span className="text-xs">üë•</span>
                              </div>
                              <span className="font-medium">Ch·∫ø ƒë·ªô C√¢u l·∫°c b·ªô</span>
                              <span className="text-xs px-2 py-1 rounded-full bg-blue-500/20 text-blue-300">FTC</span>
                            </>
                          ) : (
                            <>
                              <div className={`w-6 h-6 rounded-full ${BRAND.gradients.ambient} flex items-center justify-center`}>
                                <span className="text-xs">üìö</span>
                              </div>
                              <span className="font-medium">Ch·∫ø ƒë·ªô Ng√†nh</span>
                              <span className="text-xs px-2 py-1 rounded-full bg-orange-500/20 text-orange-300">FinTech</span>
                            </>
                          )}
                        </div>
                        <div className="relative">
                          <Textarea
                            ref={textareaRef}
                            value={inputValue}
                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInputValue(e.target.value)}
                            onKeyDown={(e: React.KeyboardEvent<HTMLTextAreaElement>) => handleKeyDown(e)}
                            placeholder={selectedMode === "club" ? "H√£y nh·∫≠p n·ªôi dung c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ FTC" : "H·ªèi nh·∫≠p n·ªôi dung c√¢u h·ªèi ccuar b·∫°n v·ªÅ ng√†nh Fintech"}
                            className={`w-full min-h-[48px] max-h-32 resize-none ${BRAND.surfaces.interactive} ${BRAND.borders.primary} border ${BRAND.text.primary} placeholder:${BRAND.text.placeholder} ${BRAND.states.focus} outline-none transition-all rounded-2xl pr-14 text-sm py-3`}
                            disabled={isSending}
                            rows={1}
                          />
                          {isSending && (
                            <div className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 flex items-center">
                              <div className={`w-5 h-5 border-2 border-gray-400 border-t-blue-400 rounded-full animate-spin`}></div>
                            </div>
                          )}
                        </div>
                      </div>
                      <SimpleChatbotSend
                        onClick={handleSendMessage}
                        disabled={!inputValue.trim() || isSending}
                        isLoading={isSending}
                        className="chatbot-send-button"
                      />
                    </div>
                    {isSending && (
                      <div className={`mt-3 flex items-center gap-2 text-sm ${BRAND.text.muted}`}>
                        <span className={`animate-pulse text-[${BRAND.primary}]`}>üß†</span>
                        <span>AI ƒëang ph√¢n t√≠ch c√¢u h·ªèi c·ªßa b·∫°n...</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Sidebar (4 columns) - Updated layout */}
              <div className="xl:col-span-4 flex flex-col gap-6 min-h-[600px]">
                {/* Quick Questions - flex-1 ƒë·ªÉ th·∫≥ng ƒë√°y */}
                <div className="bg-gradient-to-br from-gray-900/90 to-gray-800/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-700/50 overflow-hidden flex-1 flex flex-col">
                  <div className="p-4 flex-1 flex flex-col">
                    <div className="space-y-3 flex-1 overflow-auto">
                      <div className="flex items-center gap-3 mb-4">
                        <div className="w-12 h-12 rounded-3xl flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg">
                          <span className="text-white text-2xl">‚ùî</span>
                    </div>
                    <div>
                          <h3 className="font-semibold text-white">C√¢u h·ªèi g·ª£i √Ω</h3>
                          <p className="text-sm text-gray-300">B·∫•m ƒë·ªÉ h·ªèi ngay</p>
                    </div>
                  </div>
                  
                    {SUGGESTED_QUESTIONS.map((q, idx) => (
                      <button
                        key={idx}
                        onClick={() => {
                          setSelectedMode("club")
                          handleSendMessage(q)
                        }}
                          className="w-full text-left p-4 rounded-2xl bg-gray-800/50 hover:bg-gray-700/50 border border-gray-600/50 hover:border-blue-400/50 transition-all group backdrop-blur-sm"
                        >
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0 shadow-lg">
                              <span className="text-sm font-semibold text-white">{idx + 1}</span>
                            </div>
                            <div className="flex-1">
                              <p className="text-sm font-medium text-white group-hover:text-blue-300 leading-relaxed">{q}</p>
                            </div>
                            <span className="text-gray-400 group-hover:text-blue-400 opacity-0 group-hover:opacity-100 transition-all">‚û§</span>
                        </div>
                      </button>
                    ))}
                    </div>
                  </div>
                </div>

                {/* Features - flex-none ƒë·ªÉ c·ªë ƒë·ªãnh */}
                <div className="bg-gradient-to-br from-gray-900/90 to-gray-800/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-700/50 p-6 flex-none">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-12 h-12 rounded-3xl flex items-center justify-center bg-gradient-to-br from-green-500 to-blue-600 shadow-lg">
                      <span className="text-white text-2xl">‚ö°</span>
                    </div>
                    <div>
                      <h3 className="font-semibold text-white">T√≠nh nƒÉng n·ªïi b·∫≠t</h3>
                      <p className="text-sm text-gray-300">Kh√°m ph√° kh·∫£ nƒÉng AI</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="flex items-start gap-3 p-3 rounded-2xl hover:bg-gray-800/50 transition-all backdrop-blur-sm">
                      <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0 shadow-lg">
                        <span className="text-white text-lg">üß†</span>
                      </div>
                      <div>
                        <p className="font-medium text-white text-sm">AI th√¥ng minh</p>
                        <p className="text-xs text-gray-300">Hi·ªÉu ng·ªØ c·∫£nh v√† ph·∫£n h·ªìi m·∫°ch l·∫°c</p>
                      </div>
                    </div>
                    <div className="flex items-start gap-3 p-3 rounded-2xl hover:bg-gray-800/50 transition-all backdrop-blur-sm">
                      <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-green-500 to-blue-600 flex items-center justify-center flex-shrink-0 shadow-lg">
                        <span className="text-white text-lg">üåç</span>
                      </div>
                      <div>
                        <p className="font-medium text-white text-sm">C·∫≠p nh·∫≠t k·ªãp th·ªùi</p>
                        <p className="text-xs text-gray-300">Ki·∫øn th·ª©c FinTech t·ªïng quan</p>
                      </div>
                    </div>
                    <div className="flex items-start gap-3 p-3 rounded-2xl hover:bg-gray-800/50 transition-all backdrop-blur-sm">
                      <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-yellow-500 to-orange-600 flex items-center justify-center flex-shrink-0 shadow-lg">
                        <span className="text-white text-lg">üí¨</span>
                      </div>
                      <div>
                        <p className="font-medium text-white text-sm">ƒêa ch·∫ø ƒë·ªô chat</p>
                        <p className="text-xs text-gray-300">C√¢u l·∫°c b·ªô & FinTech</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        <Footer />
      </div>
    </>
  )
}
